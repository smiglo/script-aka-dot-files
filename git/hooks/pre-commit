#!/usr/bin/env bash

maindir() {
  local dir=$(git rev-parse --git-dir 2>/dev/null)
  [[ $? != 0 ]] && return 1
  echo "$dir"
  return 0
}

check() {
  local dir="$(maindir)"
  local files=$(command cd "$dir"; git diff --cached --name-only)
  local err=0 line= skip=
  local keyword="GIT-HOOK-IGNORE:"
  [[ -z "$files" ]] && return 0
  cd $dir
  for f in $files; do
    [[ ! -e "$f" || -d "$f" ]] && continue
    git diff --cached "$f" | command grep -q "^+.*$1" || continue
    skip=false
    command grep --color -Hn -E "$1" "$f"
    while read line; do
      [[ $line != \#* && $line != //#* ]] && break
      [[ $line != *$keyword* ]] && continue
      [[ $line != *$1* ]] && continue
      skip=true
      break
    done < $f
    ! $skip && err=1 || echo "[$keyword] File was ignored" >/dev/stderr
  done
  cd - >/dev/null
  return $err
}

check_special() {
  local dir=$(maindir)
  local files=$(command cd $dir; git diff --cached --name-only)
  local err=0 line= to_check=
  local keyword="GIT-HOOK-SPECIAL:"
  [[ -z "$files" ]] && return 0
  command cd $dir
  for f in $files; do
    [[ ! -e $f || -d $f ]] && continue
    ! command grep -q "$keyword" "$f" && continue
    to_check=
    while read line; do
      [[ $line != \#* && $line != //#* ]] && break
      [[ $line != *$keyword* ]] && continue
      to_check=${line/*$keyword }
      break
    done < $f
    [[ -z $to_check ]] && continue
    if git diff --cached "$f" | command grep -q "^+.*$to_check"; then
      command grep --color -Hn "$to_check" "$f"
      err=1
    fi
  done
  cd - >/dev/null
  return $err
}

check_debugs() {
  local i= debugs="//\\s*\\<TB].* \<printf( \<cout\> \<cerr\> Thread\.dumpStack() \<System\.\(out\|err\)\.print $GIT_PRE_COMMIT_DEBUGS"
  for i in $debugs; do
    check "$i" || return 1
  done
  return 0
}

displayTB() {
  local err=0
  local phrase="TB]"
  local sep="--------------------------------------------------------------\n"
  local answer=
  check "$phrase" >/dev/null
  [[ "$?" == '0' ]] && return 0
  echo -e "$sep"
  echo "Lines with $phrase:"
  echo -e "$sep"
  check "$phrase"
  echo -e "$sep"
  return 0
}

[[ ! -z $GIT_PRE_COMMIT_IGNORE ]] && echo "$PWD" | command grep -q -e "---$GIT_PRE_COMMIT_IGNORE" && exit 0

if [[ ! -z $GIT_PRE_COMMIT_REPO_WHITELIST ]]; then
  found=false
  for i in $GIT_PRE_COMMIT_REPO_WHITELIST; do
    echo "$PWD" | command grep -q -e "$i" && found=true
    $found && break
  done
  ! $found && exit 0
fi

if [[ ! -z $GIT_PRE_COMMIT_REPO_BLACKLIST ]]; then
  found=false
  for i in $GIT_PRE_COMMIT_REPO_BLACKLIST; do
    echo "$PWD" | command grep -q -e "$i" && found=true && break
  done
  $found && exit 0
fi

err=0

if [[ $err == 0 ]]; then
  check_debugs
  [[ "$?" != "0" ]] && echo -e "\nCommit REJECTED\n" && err=1
fi

if [[ $err == 0 ]]; then
  check_special
  [[ "$?" != "0" ]] && echo -e "\nCommit REJECTED\n" && err=1
fi

if [[ $err == 0 ]]; then
  displayTB
fi

# [[ "$err" == '0' ]] && echo "TB] [ok]" && exit 1 #//TB]
exit $err

