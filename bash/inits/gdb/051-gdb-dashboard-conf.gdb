# auto generated by GDB dashboard

alias -a db = dashboard

dashboard -style  compact_values              True
dashboard -style  max_value_length            120
dashboard -style  style_critical              31
dashboard -style  syntax_highlighting         'rrt'
dashboard -style  value_truncation_string     '+'
dashboard -style  prompt_running              '\\[\\e[1;35m\\]>>:\\[\\e[0m\\]'
dashboard assembly    -style function         False
# dashboard assembly    -style highlight-line   True
dashboard assembly    -style opcodes          False
# dashboard expressions -style align            True
dashboard history     -style limit            10
dashboard memory      -style cumulative       True
dashboard memory      -style placeholder      '.'
dashboard source      -style height           15
dashboard stack       -style limit            3
dashboard stack       -style arguments        True
dashboard stack       -style locals           False
dashboard variables   -style compact          False

define dbsource
  dashboard -layout  source !assembly !registers !threads !stack  variables !memory  expressions !history !breakpoints
  dashboard source    -style height 20
  dashboard variables -style compact True
  dashboard
end
define dbasm
  dashboard -layout  source  assembly  registers !threads !stack !variables  memory  expressions !history !breakpoints
  dashboard source   -style height 5
  dashboard
end
define dbcore
  dashboard -layout  source !assembly !registers  threads !stack  variables  memory  expressions !history !breakpoints
  dashboard stack    -style locals True
  dashboard
end
define continue-breakpoint
  python gdb.post_event(lambda: gdb.execute('continue'))
end

define dbout
  if $argc == 1
    dashboard -output /dev/pts/$arg0
  else
    dashboard $arg0 -output /dev/pts/$arg1
  end
end

define wm
  if $argc == 0
    dashboard memory watch $rbp-128 128
  else
    if $argc == 1
      dashboard memory watch $arg0 128
    else
      dashboard memory watch $arg0 $arg1
    end
  end
end
define we
  dashboard expressions watch $arg0
end
define uwm
  dashboard memory unwatch $arg0
end
define uwe
  dashboard expressions unwatch $arg0
end

python
import os
h = os.getenv("GDB_DB")
if h:
  print("Setting dashboard to: " + h)
  gdb.execute(h)
else:
  h = os.getenv("GDB_DB_L")
  if h:
    print("Setting dashboard layout to: " + h)
    gdb.execute("dashboard -layout " + h)
  else:
    gdb.execute("dbsource")
h = os.getenv("GDB_DB_O")
if h:
  print("Setting dashboard output to: " + h)
  gdb.execute("dashboard -output /dev/pts/" + h)
h = os.getenv("GDB_DB_O_ASM")
if h:
  gdb.execute("dashboard assembly -output /dev/pts/" + h)
h = os.getenv("GDB_DB_O_BRK")
if h:
  gdb.execute("dashboard breakpoints -output /dev/pts/" + h)
h = os.getenv("GDB_DB_O_EXP")
if h:
  gdb.execute("dashboard expressions -output /dev/pts/" + h)
h = os.getenv("GDB_DB_O_HIS")
if h:
  gdb.execute("dashboard history -output /dev/pts/" + h)
h = os.getenv("GDB_DB_O_MEM")
if h:
  gdb.execute("dashboard memory -output /dev/pts/" + h)
h = os.getenv("GDB_DB_O_REG")
if h:
  gdb.execute("dashboard registers -output /dev/pts/" + h)
h = os.getenv("GDB_DB_O_SRC")
if h:
  gdb.execute("dashboard source -output /dev/pts/" + h)
h = os.getenv("GDB_DB_O_STA")
if h:
  gdb.execute("dashboard stack -output /dev/pts/" + h)
h = os.getenv("GDB_DB_O_THR")
if h:
  gdb.execute("dashboard threads -output /dev/pts/" + h)
h = os.getenv("GDB_DB_O_VAR")
if h:
  gdb.execute("dashboard variables -output /dev/pts/" + h)
end

