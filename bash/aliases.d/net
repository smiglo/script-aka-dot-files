#!/usr/bin/env bash
# vim: fdl=0

net() { # @@ # {{{
  # Errors: # {{{
  # 1  - no ping to IP
  # 2  - no ping to DNS
  # 10 - no ping to gateway
  # 11 - no gateway address # }}} # }}}
  if [[ $1 == '@@' ]]; then # {{{
    echo "-s --silent -v -vv -h --help -d --details --speed -l --loop -f --fix -ff --fix-first" --no-{f,fix} --wait{,={10,60}s,-{msg,check}}
    echo --loop={5s,15t,5s20t,10t3s,5}
    return 0
  fi # }}}
  local mtr=false speed=false out=/dev/null fix="${NET_CHECK_FIX:-false}" showHelp=false
  local waitFor=false waitTime=30s waitMsg="Waiting for Internet connection... " waitJustCheck=false
  local addressGateway= addressIP="8.8.8.8" addressDNS="google.pl" loop=false
  local readKey= readTimeout=2 loopTries=15 echormParams="-nh"
  echorm + 1
  while [[ ! -z $1 ]]; do # {{{
    case $1 in
    -s | --silent)     echorm -; fix=false;;
    -v)                echorm + 1;;
    -vv)               echorm + 2; echormParams=""; out=/dev/stdout;;
    -h | --help)       showHelp=true;;
    -d | --details)    speed=true; mtr=true;;
    --speed)           speed=true;;
    -f | --fix)        fix=true;;
    --loop=*) # {{{
      if [[ ${1#--loop=} =~ ^([0-9]+s)?([0-9]+t)?([0-9]+s)?$ ]]; then
        if [[ ! -z ${BASH_REMATCH[1]} ]]; then
          readTimeout="${BASH_REMATCH[1]}" && readTimeout=${readTimeout%s}
        elif [[ ! -z ${BASH_REMATCH[3]} ]]; then
          readTimeout="${BASH_REMATCH[3]}" && readTimeout=${readTimeout%s}
        fi
        if [[ ! -z ${BASH_REMATCH[2]} ]]; then
          loopTries="${BASH_REMATCH[2]}" && loopTries=${loopTries%t}
        fi
      elif [[ ${1#--loop=} =~ ^([0-9]+)$ ]]; then
        readTimeout="${BASH_REMATCH[1]}"
      fi;;& # }}}
    -l | --loop | --loop=*) # {{{
      loop=true;; # }}}
    --no-f | --no-fix) fix=false;;
    --wait)            waitFor=true;;
    --wait-check)      waitJustCheck=true;;
    --wait=*)          waitFor=true; waitTime=${1#--wait=};;
    --wait-msg)        waitMsg="$2"; shift;;
    -ff | --fix-first) # {{{
        if [[ -z $NET_CHECK_FIX_COMMAND ]]; then
          vim /etc/resolv.conf </dev/tty >/dev/tty
        else
          $NET_CHECK_FIX_COMMAND
        fi;; # }}}
    *) # {{{
      if [[ $1 =~ ^[0-9]+\.[0-9]+.[0-9]+.[0-9]+ ]]; then
        addressIP="$1"
      else
        addressDNS="$1"
      fi;; # }}}
    esac
    shift
  done # }}}
  local pingParams="-c1 -w1" ts= err=0 colorsOn=
  declare -A colors=([ts]="cyan")
  [[ ! -t 2 ]] && colorsOn=false
  [[ ! -t 1 ]] && fix=false
  $IS_MAC && pingParams="-c1 -W1"
  if $waitFor; then # {{{
    command ping $pingParams $addressIP >/dev/null 2>&1 && return 0
    $waitJustCheck && return 1
    progress --msg "$waitMsg" --cmd "command ping $pingParams $addressIP" --dots --wait 60s --key --err
    return $?
  fi # }}}
  if $showHelp; then # {{{
    # Gateway address {{{
    if which ip >/dev/null 2>&1; then
      addressGateway="$(ip route show | awk '/^default/ {print $3}')"
    elif which route >/dev/null 2>&1; then
      if ! $IS_MAC; then
        addressGateway="$(route -n | awk '/^0.0.0.0/{print $2}')"
      else
        addressGateway="$(route -n get default | awk '/gateway:/{print $2}')"
      fi
    fi # }}}
    echo "Return errors:"
    echo "1:   No ping to $(cl ip $addressIP)"
    echo "2:   No ping to $(cl ip $addressDNS)"
    echo "10:  No ping to gateway ($(cl ip $addressGateway))"
    echo
    echo "When run with --wait, then they are:"
    echo "1:   Timeout"
    echo "12:  Key Enter"
    echo "255: Key Q/N"
    echo
    return 0
  fi # }}}
  # IP Address # {{{
  local gatewayOk=false try=0
  while true; do
    echorm -C -n 1 "Checking ping to IP (%ip:{$addressIP}) address... "
    echorm -nl 2
    ts="$(($(command date +%s%N)/1000000))"
    err=0; command ping $pingParams $addressIP >$out 2>&1 || err=1
    ts="$(($(command date +%s%N)/1000000-ts))"; ts="$(printf "%d.%03d" $((ts/1000)) $((ts%1000)))"
    if [[ $err == 0 ]]; then # {{{
      echorm -C $echormParams 1 "%ok:OK (%ts:{$ts})"
      break # }}}
    else # {{{
      echorm -C $echormParams 1 "%err:FAIL (%ts:{$ts})"
      echorm -C 2 "No ping to IP (%ip:{$addressIP}) address"
      try=$(((try+1)%$loopTries))
      [[ $try == 0 ]] && gatewayOk=false
      if ! $gatewayOk; then # {{{
        while true; do
          local addressGatewayNew= updated=false
          # Gateway address {{{
          if which ip >/dev/null 2>&1; then
            addressGatewayNew="$(ip route show | awk '/^default/ {print $3}')"
          elif which route >/dev/null 2>&1; then
            if ! $IS_MAC; then
              addressGatewayNew="$(route -n | awk '/^0.0.0.0/{print $2}')"
            else
              addressGatewayNew="$(route -n get default | awk '/gateway:/{print $2}')"
            fi
          fi # }}}
          [[ $addressGateway != $addressGatewayNew ]] && addressGateway=$addressGatewayNew && updated=true
          if [[ ! -z $addressGateway ]]; then # {{{
            echorm -C -n 1 "Checking ping to gateway (%ip:{$addressGateway}$($updated && cl - "/" info "updated"))... "
            echorm -nl 2
            ts="$(($(command date +%s%N)/1000000))"
            err=0; command ping $pingParams $addressGateway >$out 2>&1 || err=1
            ts="$(($(command date +%s%N)/1000000-ts))"; ts="$(printf "%d.%03d" $((ts/1000)) $((ts%1000)))"
            if [[ $err == 0 ]]; then # {{{
              echorm -C $echormParams 1 "%ok:OK (%ts:{$ts})"
              gatewayOk=true try=0
              break # }}}
            else # {{{
              echorm -C $echormParams 1 "%err:FAIL (%ts:{$ts})"
              echorm -C 2 "No ping to gateway (%ip:{$addressGateway})"
              if ! $loop || ( read -t $readTimeout -n1 -s readKey </dev/tty && [[ $readKey == '' || ${readKey,,} == 'q' ]] ) ; then # {{{
                return 10
              fi # }}}
            fi # }}} # }}}
          else # {{{
            echorm -C 1 "Checking ping to gateway (%ip:{0.0.0.0})... %err:FAIL"
            if ! $loop || ( read -t $readTimeout -n1 -s readKey </dev/tty && [[ $readKey == '' || ${readKey,,} == 'q' ]] ) ; then # {{{
              return 10
            fi # }}}
          fi # }}}
        done
      fi # }}}
      if ! $loop || ( read -t $readTimeout -n1 -s readKey </dev/tty && [[ $readKey == '' || ${readKey,,} == 'q' ]] ) ; then # {{{
        return 11
      fi # }}}
    fi # }}}
  done # }}}
  # DNS Address # {{{
  while true; do
    echorm -C -n 1 "Checking ping to DNS (%ip:{$addressDNS}) address... "
    echorm -nl 2
    ts="$(($(command date +%s%N)/1000000))"
    err=0; command ping $pingParams $addressDNS >$out || err=1
    ts="$(($(command date +%s%N)/1000000-ts))"; ts="$(printf "%d.%03d" $((ts/1000)) $((ts%1000)))"
    if [[ $err == 0 ]]; then # {{{
      echorm -C $echormParams 1 "%ok:OK (%ts:{$ts})"
      break # }}}
    else # {{{
      echorm -C $echormParams 1 "%err:FAIL (%ts:{$ts})"
      echorm -C 2 "No ping to DNS (%ip:{$addressDNS}) address"
      if $fix; then
        if [[ -z $NET_CHECK_FIX_COMMAND ]]; then
          vim /etc/resolv.conf </dev/tty >/dev/tty && fix=false && continue
        else
          $NET_CHECK_FIX_COMMAND && continue
        fi
      fi
      if ! $loop || ( read -t $readTimeout -n1 -s readKey </dev/tty && [[ $readKey == '' || ${readKey,,} == 'q' ]] ) ; then # {{{
        return 2
      fi # }}}
    fi # }}}
  done # }}}
  if $speed; then # {{{
    speedtest
  fi # }}}
  if $mtr; then # {{{
    mtr $addressDNS
  fi # }}}
} # }}}
getip() { # {{{
  local ip="${1:-1}" network="$2"
  [[ -z $network ]] && case $ip in *.*.*.*) network=${ip%.*};; esac
  [[ -z $network ]] && network="${NET:-$NET_HOME}"
  read -a network <<<"${network//./ } -"
  case $ip in # {{{
  ?*.*.*.*) ;;
  .*.*.* | [0-9]*.*.*)    ip="${network[0]}.${ip#.}";;
  .*.*   | [0-9]*.*)      ip="${network[0]}.${network[1]}.${ip#.}";;
  .*     | [0-9]*)        ip="${network[0]}.${network[1]}.${network[2]}.${ip#.}";;
  esac # }}}
  echo "$ip"
} # }}}
export PHISTORY_IGNORED_COMMANDS+=":net:getip"

