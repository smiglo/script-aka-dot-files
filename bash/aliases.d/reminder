#!/usr/bin/env bash
# vim: fdl=0

reminder() { # @@ # {{{
  local i= tool='/usr/bin/notify-send' verbose=">/dev/null 2>&1" be_verbose=false silent=false
  if [[ $1 == @@ ]]; then # {{{
    local ret="-v -i -rm -l --list"
    case $3 in
    -i | -rm) # {{{
      ret="$(at -l | awk '{print $1}')" ;; # }}}
    *) # {{{
      case $2 in
      1) # {{{
        ret+=" $(find . -maxdepth 1 -type f -executable)"
        if [[ ! -z $REMINDER_DIR && -e $REMINDER_DIR ]]; then
          for i in $(command cd "$REMINDER_DIR"; ls -d *); do
            [[ -f $REMINDER_DIR/$i && -x $REMINDER_DIR/$i ]] && ret+=" $i"
          done
        fi;; # }}}
      *) # {{{
        ret="30m 1h 16:30";; # }}}
      esac;; # }}}
    esac
    echo "$ret"
    return 0
  fi # }}}
  $IS_MAC && tool="$BASH_PATH/messages.sh"
  type $tool >/dev/null 2>&1 || { ! $silent && echo "Notifier tool [$tool] not found" >/dev/stderr; return 1; }
  [[ -z $1 || ! -t 1 ]] && set -- -l
  while [[ ! -z $1 ]]; do # {{{
    case $1 in
    -i) # {{{
      local no="$2"
      if [[ -z $no ]]; then # {{{
        for no in $(at -l | sort -k1,1n | awk '{print $1}'); do
          reminder -i $no
        done
        return 0
      fi # }}}
      ! at -l | command grep -q "^$no\s" && return 1
      at -l | command grep "^$no\s"
      at -c "$no" | sed -e '1,/exit 1/ d' -e '/^[{}]/d' -e '/^\s*$/d' | sed 's/^/\t/'
      return 0;; # }}}
    -l | --list | -rm) # {{{
      local oIFS="$IFS" list= no= d= msg= i=
      IFS=
      while read i; do # {{{
        no="$(echo "$i" | awk '{print $1}')"
        d="$(command date -d "$(echo "$i" | awk '{print $3,$4,$6,$5}')" +"%y%m%d%H%M")"
        msg="$(at -c "$no" | sed -e '1,/exit 1/ d' -e '/^[{}]/d' -e '/^\s*$/d' | sed 's/^/\t/' | xargs)"
        list+="$no $d : $msg\n"
      done < <(at -l) # }}}
      IFS="$oIFS"
      list="$(echo -en "$list" | sort -k2,2n | sed 's/^\([0-9]\+\) \([0-9]\{2\}\)\([0-9]\{2\}\)\([0-9]\{2\}\)\([0-9]\{2\}\)\([0-9]\{2\}\) : /\1 \4.\3.\2-\5:\6 : /')"
      ;;& # }}}
    -l | --list) # {{{
      echo "$list"
      return 0;; # }}}
    -rm) # {{{
      shift
      local no="$@"
      if [[ -z $no ]]; then # {{{
        [[ -z $list ]] && echo "Nothing to remove" >/dev/stderr && return 0
        no="$(echo "$list" | fzf -0 -m -s --prompt 'To remove> ' | cut -d' ' -f1)"
        [[ -z $no ]] && return
      fi # }}}
      at -r $no
      return 0;; # }}}
    -v) verbose=; be_verbose=true;;
    -s) silent=true;;
    *)  break;;
    esac
    shift
  done # }}}
  local msg="$1" ts="${2#+}" h= m= s= file=false err=0 params=
  if [[ $# -gt 2 ]]; then
    ts="${@:$#:$#}"
    params="${@:2:$#-2}"
  fi
  [[ ! -z $msg && ! -z $ts ]] || { ! $silent && echo "Argument missing [$@]" >/dev/stderr; return 1; }
  [[ ! -z "$REMINDER_DIR" && -e "$REMINDER_DIR/$msg" ]] && msg="$REMINDER_DIR/$msg"
  [[ "$msg" == ./* ]] && msg="$PWD/$msg"
  [[ "$msg" == /* && -e "$msg" ]] && file=true
  ts="$($ALIASES time2s "$ts")"
  [[ $? == 0 && $ts == *:*:* ]] && ts="${ts%:*}"
  if [[ $ts =~ ^[0-9]+:[0-9]+$ ]]; then
    if [[ $((10#${ts//:})) -le "$((10#$(command date +'%H%M')))" ]]; then
      ! $silent && echo "Scheduled time is before now, rejecting" >/dev/stderr
      return 1
    fi
  fi
  if $file; then # {{{
    $be_verbose && set -xv
    echo "$msg $params" | ( command cd $HOME; eval at "'$ts'" $verbose )
    err="$?"
    $be_verbose && set +xv
    ! command grep -q "${tool##*/}\|no-notify" "$msg" && msg="Script [${msg##*/}] executed" && file=false
  fi # }}}
  if ! $file && [[ $err == '0' ]]; then # {{{
    local msg_wrapper="$REMINDER_DIR/.msg.sh"
    if [[ -e "$msg_wrapper" ]]; then
      echo "$msg_wrapper \"Reminder: $msg\""
    else
      if ! $IS_MAC; then
        echo "$tool -i starred -u critical 'Reminder: $msg'"
      else
        echo "$tool 'Reminder' '$msg'"
      fi
    fi | ( $be_verbose && set -xv; command cd $HOME; eval at "'$ts'" $verbose )
    err="$?"
  fi # }}}
  if [[ $err == 0 ]]; then
    ! $silent && at -l | sort -k1,1n | tail -n1
    if $be_verbose; then
      at -c "$(at -l | sort -k1,1n | tail -n1 | awk '{print $1}')" | sed -n -e '/^\s*$/d' -e '/^\/home/,$ p' | sed 's/^/\t/'
    fi
  else
    ! $silent && echo "Failed to schedule the reminder" >/dev/stderr
  fi
  return $err
} # }}}
export PHISTORY_IGNORED_COMMANDS+=":reminder:at"

