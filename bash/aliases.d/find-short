#!/usr/bin/env bash
# vim: fdl=0

f() { # @@ # {{{
  if [[ $1 == '@@' ]]; then
    echo "-+tee=false +tee=true +-fzf +fzf +find --full -f"
    return 0
  fi
  local use_tee=true use_fzf=true fallback=false params= query= find_force=false find_full=false
  ! which fdfind >/dev/null 2>&1 && find_force=true
  while [[ ! -z $1 ]]; do
    case $1 in
    +t | +tee)   use_tee=true;;
    +tee=*)      use_tee=${1/+tee=};;
    +-fzf | +-f) use_fzf=false;;
    -f | --full) find_full=true; find_force=true;;
    +fzf)        use_fzf=$FZF_INSTALLED;;
    +fzf=*)      use_fzf=${1/+fzf=}; $use_fzf && use_fzf=$FZF_INSTALLED;;
    +find | +f)  find_force=true;;
    *) # {{{
      query="$1"
      if [[ ! -z $2 ]]; then
        if [[ ! -d $1 ]]; then
          params+=" ."
        else
          params+=" $1"
          shift
          query="$1"
        fi
        [[ $1 != -* ]] && params+=" -name" || query="$2"
        local msg="Falling back to find command: 'find $params $@'"
        progress --msg "$msg" --dots --cnt 30 --no-err --out /dev/stderr || return 0
        if [[ ! -t 1 ]]; then
          echorm "find $params $@"
        fi
        fallback=true
      fi
      break;; # }}}
    esac
    shift
  done
  [[ ! -t 1 ]] && use_fzf=false
  $find_force && [[ -z $@ ]] && fallback=true && set -- .
  if ! $fallback; then
    if ! $find_force; then
      echorm "fd $1"
      output_to_file $use_tee +fzf=$use_fzf +fzf-p "--prompt 'fd: $query> '" --no-err fdfind "$1"
    else
      echorm "find . -name \"$1\""
      output_to_file $use_tee +fzf=$use_fzf +fzf-p "--prompt 'find: $query> '" --no-err eval find . $(! $find_full && [[ ! -z "$F_FIND_EXCLUDE" ]] && echo "-path '$F_FIND_EXCLUDE' -prune -o") -name "$1" -print
    fi
  else
    echorm "find $params \"$@\""
    output_to_file $use_tee +fzf=$use_fzf +fzf-p "--prompt 'find: $query> '" --no-err find $params "$@"
  fi
  return $?
} # }}}

alias ff="f +find" # @@

