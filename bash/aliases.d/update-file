#!/usr/bin/env bash
# vim: fdl=0

update-file() { # @@ # {{{
  local wtd="update-line"
  if [[ $1 == '@@' ]]; then # {{{
    case $3 in
    -wtd | --what-to-do) echo "update-var add-to-var update-line remove-line";;
    *)
      echo "-wtd --what-to-do"
      echo "--update-var --add-to-var --update-line --remove-line"
      echo "-a --add -rm -ul --line -uv --var";;
    esac
    return 0
  fi # }}}
  local file=
  [[ -t 0 ]] && file="$1" && shift
  while [[ ! -z $1 ]]; do # {{{
    case $1 in
    -wtd | --what-to-do) wtd="$2"; shift;;
    --update-var | --add-to-var | --update-line | --remove-line) wtd="${1#--}";;
    -a | --add )  wtd="add-to-var";;
    -rm)          wtd="remove-line";;
    -ul | --line) wtd="update-line";;
    -uv | --var)  wtd="update-var";;
    *) break;;
    esac
    shift
  done # }}}
  local match="$1" newVal="$2" create="${3:-true}"
  [[ -z $match ]] && echo "Match pattern not provided" >/dev/stderr && return 1
  [[ -z $newVal && ( $wtd != 'remove-line' && $wtd != 'update-var' ) ]] && echo "New value not provided [$match]" >/dev/stderr && return 1
  if [[ -t 0 && "$file" != '-' ]]; then
    [[ ! -e "$file" ]] && $create && touch "$file"
    [[ ! -e "$file" ]] && echo "File [$file] does not exist" >/dev/stderr && return 1
  else
    file="$TMP_MEM_PATH/update-file-$$.stdin"
    cat - >"$file"
  fi
  local fileOut="$TMP_MEM_PATH/update-file-$$.tmp" update=false
  cp "$file" "$fileOut"
  case $wtd in # {{{
  update-var | add-to-var) command grep -q "^[^#]*$match=" "$file" && update=true;;
  *)                       command grep -q "$match"        "$file" && update=true;;
  esac # }}}
  case $wtd in
  update-var) # {{{
    if $update; then
      sed \
        -e '/^[^#]*'"$match"='/s/\(.*'"$match"'\)=.*/\1="'"$newVal"'"/' \
        -e '/^[^#]*'"$match"'+=/d' \
        "$file" >"$fileOut"
    elif $create; then
      echo "export $match=\"$newVal\"" >>"$fileOut"
    fi;; # }}}
  add-to-var) # {{{
    if $update; then
      tac "$file" \
        | awk -v m=$match -v v=$newVal '/^[^#]*'"$match"'\+?=/ && !x {printf "export %s+=\"%s\"\n", m, v; x=1} 1' \
        | tac >"$fileOut"
    elif $create; then
      echo "export $match=\"$newVal\"" >>"$fileOut"
    fi;; # }}}
  update-line) # {{{
    if $update; then
      sed '/'"$match"'/s/.*/'"$newVal"'/' "$file" >"$fileOut"
    elif $create; then
      echo "$newVal" >>"$fileOut"
    fi;; # }}}
  remove-line) # {{{
    sed '/'"$match"'/d' "$file" >"$fileOut" ;; # }}}
  *) # {{{
    echo "Invalid WhatToDo [$1]" >/dev/stderr && return 1;; # }}}
  esac
  if [[ -t 0 && -t 1 ]]; then
    mv "$fileOut" "$file"
  else
    cat "$fileOut"
    rm "$fileOut"
    if [[ ! -t 0 || "$file" == *-$$.stdin  ]]; then
      rm "$file"
    fi
  fi
} # }}}
export PHISTORY_IGNORED_COMMANDS+=":update-file"

