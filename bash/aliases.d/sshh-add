#!/usr/bin/env bash
# vim: fdl=0

sshh-add() { # @@ # {{{
  local key_location="$HOME/.ssh/keys"
  local key= keys= k= params=
  if [[ $1 == '@@' ]]; then # {{{
    local ret=
    keys="$(ls *.pub 2>/dev/null)"
    if [[ ! -z $keys ]]; then
      for key in $keys; do
        key=${key/.pub}
        [[ -e $key ]] && ret+=" $key"
      done
    fi
    keys="$(find $key_location -name '*.pub')"
    if [[ ! -z $keys ]]; then
      for key in $keys; do
        key=${key/.pub}
        [[ -e $key ]] && ret+=" ${key/$key_location\/}"
      done
    fi
    ret+=" $(ssh-add --help 2>&1 | command grep  ^"  -" | cut -d' ' -f3)"
    ret+=" --lock -v --keys"
    echo $ret
    return 0
  fi # }}}
  local params=$@
  if [[ -z $params ]]; then # {{{
    keys="$(find $key_location -maxdepth 1 -not -name '*_pwd*' -name '*.pub')"
    for key in $keys; do
        key=${key/.pub}
        [[ -e $key ]] && params+=" ${key/$key_location\/}"
    done
  fi # }}}
  set -- $params
  params="$SSHH_ADD_PARAMS"
  key=
  while [[ ! -z $1 ]]; do # {{{
    case $1 in # {{{
    --lock) # {{{
      local colors=( 'red' 'green' 'yellow' 'blue' 'magenta' 'cyan' ) tmp=
      local c1="0"
      local c2="$(( ($c1 + 1 + $RANDOM % (${#colors[*]} - 1)) % ${#colors[*]} ))"
      local cmatrix_cmd="nice -n 15 cmatrix -u ${CMATRIX_SPEED:-5} -b"
      if ${SSHH_ADD_LOCK_NO_PWD:-false} || [[ -z $SSHH_ADD_LOCK_NO_PWD && -z $SSH_AGENT_LOCK_PWD ]] || [[ "$(tmux display-message -pF '#{client_tty}')" !=  *"/0" && $(tmux list-clients | wc -l) -gt 1 ]] ; then # {{{
        eval $cmatrix_cmd -C ${colors[$(($RANDOM % ${#colors[*]}))]}
        return
      fi # }}}
      if [[ ! -z $SSH_AGENT_LOCK_PWD ]]; then # {{{
        shift
        local timeout="$SSH_AGENT_LOCK_PRE_TIMEOUT"
        local from_tmux=false
        while [[ ! -z $1 ]]; do
          case $1 in
          --tmux) from_tmux=true;
                  if [[ ( ! -z $TMUX_SESSION && $(tmux show-option -t $TMUX_SESSION -qv @lock_allowed) == 'false' ) || $(tmux show-option -gqv @lock_allowed) == 'false' ]]; then
                    tmux display-message "Locking disabled"
                    return 0
                  fi;;
          *) timeout="$1";;
          esac
          shift
        done
        mutex_init "ssh-lock" --no-trap --auto-clean-after 0
        if ! mutex_lock; then
          eval $cmatrix_cmd -C ${colors[$c1]}
          $from_tmux && tmux display-message "Cannot lock ssh-agent, mutex locked" || echo "Cannot lock ssh-agent, mutex locked" >/dev/stderr
          sleep 1
          return 1
        fi
        if [[ ! -z $timeout && $timeout != 0 ]]; then
          [[ $timeout == -1 ]] && timeout=$((3 * 60 * 60))
          [[ $timeout -lt 5 ]] && timeout=5
          $ALIASES run_for_some_time --no-fallback --cmd "$cmatrix_cmd -C ${colors[$c1]}; reset" --watchdog-cmd 'cmatrix' --wait $((timeout-2)):2
          [[ $? != 255 ]] && { read -s -n 10000 -t 0.5 tmp; mutex_unlock; mutex_deinit; return 0; }
        fi
        { # {{{
          /usr/bin/expect - <<-EOF
							set timeout -1
							spawn ssh-add -x
							match_max 100000
							expect "Enter lock password: "
							send -- "$::env(SSH_AGENT_LOCK_PWD)\r"
							expect "Again: "
							send -- "$::env(SSH_AGENT_LOCK_PWD)\r"
							expect eof
					EOF
        } >/dev/null 2>&1 # }}}
        # }}}
      else # {{{
        local err= locked=false
        echorm "Locking ssh-agent...\n"
        while true; do
          ssh-add -x 2>/dev/null
          case $? in
          0) locked=true; break;;
          2) echorm 0 "Cannot connect to ssh-agent\n"; break;;
          esac
          echorm 0 "Password mismatch, try again...\n"
        done
      fi # }}}
      while true; do # {{{
        eval $cmatrix_cmd -C ${colors[$c2]}
        reset
        if $locked; then # {{{
          echorm "Unlocking ssh-agent...\n"
          while true; do # {{{
            $ALIASES run_for_some_time --no-fallback --cmd "ssh-add -X 2>/dev/null" --wait 12:2
            local err=$?
            if [[ $err == 255 ]]; then # {{{
              while true; do
                local cNew="$(( ($c2 + 1 + $RANDOM % (${#colors[*]} - 1)) % ${#colors[*]} ))"
                [[ $cNew != $c1 ]] && c2=$cNew && break
              done
              continue 2
            fi # }}}
            [[ $err == 0 ]] && break 2
            echorm 0 "Incorrent password, try again...\n"
          done # }}}
        fi # }}}
      done # }}}
      mutex_unlock
      mutex_deinit
      if [[ ! -z $SSHH_ADD_LOCK_POST ]]; then
        if [[ -x ${SSHH_ADD_LOCK_POST/ *} ]]; then
          $SSHH_ADD_LOCK_POST
        else
          eval $SSHH_ADD_LOCK_POST
        fi
      fi
      return 0;; # }}}
    -v) echorm +;;
    --keys) shift; break;;
    -*) params+=" $1";;
    *) break;;
    esac # }}}
    shift
  done # }}}
  for k; do # {{{
    [[ $k == -* ]] && continue
    [[ $k == 'STOP' ]] && shift $# && break
    [[ ! -e $k ]] && k=$key_location/$k
    [[ ! -e $k ]] && echorm 0 "Key file [$1] not found" && return 1
    key+=" $k"
  done; shift $# # }}}
  local fSshAsk=$TMP_MEM_PATH/ssh-ask.sh list=
  which keep-pass.sh >/dev/null 2>&1 && list="$(keep-pass.sh --list-all-keys)"
  local kList="$(ssh-add -l)"
  for k in $key; do # {{{
    [[ $k == -* ]] && continue
    [[ $kList =~ $k ]] && continue
    local kName=${k##*/}
    local paramK=SSHH_ADD_PARAMS_${kName^^}
    local cmd="ssh-add $params ${!paramK} $k"
    if echo "$list" | command grep -q "^$kName$" && keep-pass.sh --get --key $kName --no-intr >/dev/null 2>&1; then
      if [[ ! -e $fSshAsk ]]; then
        cat <<-'EOF' >$fSshAsk
					#!/usr/bin/env bash
					read k
					keep-pass.sh --get --key $k --no-intr
				EOF
        chmod +x $fSshAsk
      fi
      cmd="SSH_ASKPASS=$fSshAsk $cmd <<<$kName"
    fi
    echorv -M 1 cmd
    local out="$(eval $cmd 2>&1)"
    echorm 2 "$out"
  done # }}}
  [[ -e $fSshAsk ]] && rm -f $fSshAsk
  return 0
} # }}}

