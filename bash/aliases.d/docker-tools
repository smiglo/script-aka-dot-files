#!/usr/bin/env bash
# vim: fdl=0

if ! $IS_DOCKER; then
  doc() { # {{{
    [[ -z $DOCKER_CONTAINER_DEFAULT ]] && export DOCKER_CONTAINER_DEFAULT='ubu'
    [[ -z $DOCKER_IMAGE_DEFAULT ]] && export DOCKER_IMAGE_DEFAULT='ubu'
    if [[ $1 == '@@' ]]; then # {{{
      local containers="$(docker container ls -a --format "{{.Names}}")"
      local images="$(docker image ls -a --format "{{.Repository}}")"
      case $3 in
      -c) echo "$containers $DOCKER_CONTAINER $DOCKER_CONTAINER_DEFAULT";;
      -i) echo "$images $DOCKER_IMAGE $DOCKER_IMAGE_DEFAULT";;
      s | start) echo "$containers";;
      stop) echo "$containers";;
      root) echo "$containers";;
      exec) echo "$containers";;
      clean) echo "$containers -";;
      rm) echo "$containers";;
      irm) echo "$images";;
      ls) echo "---";;
      build) echo "$images $DOCKER_IMAGE $DOCKER_IMAGE_DEFAULT";;
      run) # {{{
        echo "-ns -s - -d -i -t -dit"
        echo "$containers $DOCKER_CONTAINER $DOCKER_CONTAINER_DEFAULT"
        echo "$images $DOCKER_IMAGE $DOCKER_IMAGE_DEFAULT";; # }}}
      commit) # {{{
        echo "$containers $DOCKER_CONTAINER $DOCKER_CONTAINER_DEFAULT"
        echo "$images $DOCKER_IMAGE $DOCKER_IMAGE_DEFAULT";; # }}}
      *) # {{{
        echo "-c -i --dbg"
        echo "c i"
        echo "s start stop root exec rm ls run build commit clean advance"
        echo "container image images";; # }}}
      esac
      return 0
    fi # }}}
    local cName=${DOCKER_CONTAINER:-$DOCKER_CONTAINER_DEFAULT} iName=${DOCKER_IMAGE:-$DOCKER_IMAGE_DEFAULT}
    local cSet=false iSet=false out=/dev/null
    local containerList="$(docker container ls -a --format ". {{.Names}} : {{.Image}}")"
    while [[ ! -z $1 ]]; do # {{{
      case $1 in
      --dbg) out=/dev/stderr;;
      -c) cName=$2; cSet=true; shift;;
      -i) iName=$2; iSet=true; shift;;
      *) break;;
      esac; shift
    done # }}}
    [[ -z $1 ]] && set -- start
    cmd=$1; shift
    case $cmd in
    advance) # {{{
      $cSet || cName= # mandatory: container name advance
      [[ ! -z $cName ]] || { cName=$1; shift; }
      [[ -z $cName ]] && eval $(die "no container specified")
      cName="${cName%-next}"
      cNameNext="$cName-next"
      [[ $containerList == *". $cNameNext "* ]] || eval $(die -r "no such container [$cNameNext]")
      [[ $containerList == *". $cName "* ]] && docker container remove $cName
      docker container rename $cNameNext $cName;; # }}}
    clean) # {{{
      $cSet || cName= # mandatory: container name on removal
      [[ ! -z $cName ]] || { cName=$1; shift; }
      [[ -z $cName ]] && eval $(die "no container specified")
      [[ ! -z $iName ]] || { iName=$1; shift; }
      [[ $containerList == *". $cName "* ]] || eval $(die -r "no such container [$cName]")
      if [[ $iName = '-' ]]; then
        iName=$cName
      elif [[ -z $iName ]]; then
        iName="$(echo "$containerList" | sed '/ '"$cName "'/s/.* : //')"
      fi
      doc rm $cName
      doc irm $iName;; # }}}
    start | s) # {{{
      $cSet || { cName=${1:-$cName}; shift; }
      [[ -z $cName ]] && eval $(die "no container specified")
      docker container ls -a --format "{{.Names}}" | command grep -q "$cName" || doc run -ns $cName $iName
      docker start $cName
      local pidClip=
      case $cName in
      ubu | ubu-*)
        exec 3>&2; exec 2> /dev/null
        doc-clip &
        pidClip=$!
        exec 2>&3; exec 3>&-;;
      esac
      set_title_pane "Docker: $cName" && \
      docker attach $cName
      if [[ ! -z $pidClip ]]; then
        exec 3>&2; exec 2> /dev/null
        kill $pidClip >/dev/null 2>&1
        wait $pidClip
        exec 2>&3; exec 3>&-
      fi;; # }}}
    stop) # {{{
      $cSet || { cName=${1:-$cName}; shift; }
      [[ -z $cName ]] && eval $(die "no container specified")
      docker stop $cName >$out;; # }}}
    root) # {{{
      $cSet || { cName=${1:-$cName}; shift; }
      [[ -z $cName ]] && eval $(die "no container specified")
      docker exec -u 0:0 "${@:--it}" $cName /bin/bash;; # }}}
    exec) # {{{
      $cSet || { cName=${1:-$cName}; shift; }
      [[ -z $cName ]] && eval $(die "no container specified")
      docker exec "${@:--it}" $cName /bin/bash;; # }}}
    rm) # {{{
      $cSet || cName= # mandatory: container name on removal
      [[ ! -z $cName ]] || { cName=$1; shift; }
      [[ -z $cName ]] && eval $(die "no container specified")
      docker stop $cName >$out
      docker rm $cName >$out;; # }}}
    irm) # {{{
      $iSet || iName= # mandatory: container name on removal
      [[ ! -z $iName ]] || { iName=$1; shift; }
      [[ -z $iName ]] && eval $(die "no image specified")
      docker image rm $iName >$out;; # }}}
    ls) # {{{
      docker ps -a
      echo
      docker images;; # }}}
    run) # {{{
      local p="-dit" doStart=
      while [[ ! -z $1 ]]; do # {{{
        case $1 in
        -ns) doStart=false;;
        -s)  doStart=true;;
        -)   p=;;
        -*)  p+=" $1";;
        *)   break;;
        esac; shift
      done # }}}
      $cSet || { cName=${1:-$cName}; shift; }
      $iSet || { iName=${1:-$iName}; shift; }
      [[ -z $cName || -z $iName ]] && eval $(die "no container/image specified")
      local pName="DOCKER_RUN_${cName^^}_PARAMS"
      local -n params=${pName//[-]/_}
      local err=255
      [[ $containerList == *". $cName "* ]] && cName="$cName-next"
      [[ $containerList == *". $cName "* ]] && eval $(die "container already exists [$cName]")
      case $cName in
      ubu | ubu-*) # {{{
        [[ -z $doStart ]] && doStart=true
        local dockerShare=${DOCKER_SHARE_PATH:-$HOME/share} hDir="/home/tom"
        [[ -e $HOME/.runtime/docker.ubu ]] || mkdir -p $HOME/.runtime/docker.ubu >/dev/null
        [[ -e $dockerShare ]] || mkdir -p $dockerShare >/dev/null
        docker run \
          --hostname ubu \
          -u $(id -u):$(id -g) \
          $params $p \
          --cap-add=SYS_PTRACE --security-opt seccomp=unconfined \
          --tmpfs /tmpfs:exec,mode=1777 \
          -v $HOME:/host \
          -v $HOME/.runtime/docker.ubu:$hDir/.runtime \
          -v $HOME/projects:$hDir/projects \
          -v $dockerShare:$hDir/share \
          -w /home/tom \
          --name $cName $iName \
          /bin/bash
        err=$?
        [[ $err == 0 ]] && docker start $cName; err=$?
        [[ $err == 0 ]] && docker exec -it $cName $hDir/tools.docker/docker-post.sh --yes; err=$?
        ;; # }}}
      *) # {{{
        if declare -f doc_ext >/dev/null 2>&1; then
          doc_ext run $cName $iName $params $p "$@"
          err=$?
        fi
        if [[ $err == 255 ]]; then
          docker run $params $p "$@" --name $cName $iName
          err=$?
        fi;; # }}}
      esac
      [[ -z $doStart ]] && doStart=false
      [[ $err == 0 ]] || eval $(die $err "err occurred [$err]")
      if $doStart; then
        doc start $cName
      fi;; # }}}
    build) # {{{
      $iSet || { iName=${1:-$iName}; shift; }
      [[ -z $iName ]] && eval $(die "no image specified")
      case $iName in
      ubu) # {{{
        (
          command cd $SCRIPT_PATH/bash/inits/ubu-docker
          ./build.sh
        ) ;; # }}}
      *) # {{{
        docker build "$@" -t $iName .;; # }}}
      esac;; # }}}
    commit) # {{{
      $cSet || { cName=${1:-$cName}; shift; }
      $iSet || { iName=${1:-$iName}; shift; }
      [[ -z $cName || -z $iName ]] && eval $(die "no container/image specified")
      docker commit $cName $iName;; # }}}
    i) # {{{
      docker image "$@";; # }}}
    c) # {{{
      docker container "$@";; # }}}
    *) # {{{
      docker $cmd "$@";; # }}}
    esac
  }
  compl-add doc # }}}
  doc-clip() { # {{{
    local f=$CLIP_FILE sum= sumPrev= delay=5
    [[ -z $CLIP_FILE ]] && return 1
    if [[ $1 == '-' ]]; then
      cat - >$f
      return 0
    fi
    while true; do
      [[ -e $f ]] || { sleep $delay; continue; }
      sum=$(sha1sum $f)
      [[ $sum != $sumPrev ]] || { sleep $delay; continue; }
      sumPrev=$sum
      cat $f | xc
      sleep $delay
    done
  } # }}}
else
  snapshot() { # {{{
    if [[ $1 == '@@' ]]; then # {{{
      echo "-r --restore -f --file --plain"
      return 0
    fi # }}}
    local dst="${DOCKER_SNAPSHOT_DST:-$HOME/repo.bck/ubu-snapshot.tgz}"
    local useEnc=${DOCKER_SNAPSHOT_USE_ENC:-false}
    while [[ ! -z $1 ]]; do
      case $1 in
      -f | --file) dst="$(realpath "$2")"; shift;;
      --plain) useEnc=false;;
      -r | --restore) # {{{
        shift
        local tarParams="$@"
        [[ -e $dst ]] || eval $(die "snapshot not found")
        local tmpDir=$HOME/s.tmp
        mkdir -p $tmpDir >/dev/null
        (
          set -o pipefail
          if $useEnc; then
            encryptor --bin $([[ ! -z $SNAPSHOT_KEY ]] && echo "--key $SNAPSHOT_KEY") -d $dst
          else
            cat $dst
          fi | tar -C $tmpDir $tarParams -xz -f -
        )
        [[ $? == 0 ]] || { rm -rf $tmpDir; eval $(die "cannot untar"); }
        rsync -ahtpH --no-v --no-progress $tmpDir/ $HOME/
        rm -rf $tmpDir
        return 0;; # }}}
      *) break;;
      esac; shift
    done
    local tarParams="$@"
    local list="tmp|\.cache|\.npm|\.tmux$|\.w3m|\.local|\.config|tools\.docker"
    list="$(mount | sed -n '/host_mark/s|'"$HOME/"'||p' | awk '{print $3}' | grep -v '/' | sed 's|\.|\\.|' | tr '\n' '|')$list"
    local tarExclude=
    tarExclude+=" --exclude=__pycache__"
    local excludeDirs='\.local\/state\/tmux-fingers'
    (
      cd $HOME
      mkdir -p $(dirname $dst)
      tarList="$(for i in $(ls -Ah | command grep -vE "$list"); do find $i -type f; done | sed '/'"$excludeDirs"'/d')"
      (
        set -o pipefail
        tar $tarExclude $tarParams -cz -T <(echo "$tarList") \
        | { if $useEnc; then encryptor --bin --key $SNAPSHOT_KEY; else cat -; fi } >$TMP_MEM_PATH/$(basename $dst)
      )
      if [[ $? == 0 && -s $TMP_MEM_PATH/$(basename $dst) ]]; then
        [[ -e $dst ]] && mv "$dst" "${dst%.tgz}-last.tgz"
        mv $TMP_MEM_PATH/$(basename $dst) $dst
      else
        echor "snapshot failed"
        rm -f $TMP_MEM_PATH/$(basename $dst)
      fi
    )
  }
  compl-add snapshot # }}}
fi
