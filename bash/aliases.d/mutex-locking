#!/usr/bin/env bash
# vim: fdl=0

mutex_init() { # @@ # {{{
  if [[ $1 == '@@' ]]; then # {{{
    echo "--auto-clean-after --no-trap --clean-on-start --dbg"
    return 0
  fi # }}}
  [[ -z $1 ]] && echo "Mutex not specified" >/dev/stderr && return 1
  local LOCK_DIR="$TMP_MEM_PATH/.locks"
  local newMutex="$1"
  [[ $newMutex != ./* && $newMutex != /* ]] && newMutex="$LOCK_DIR/$newMutex"
  [[ ! -z $MUTEX_LOCK_FILE && $MUTEX_LOCK_FILE != $newMutex ]] && echo "Mutex already set [${MUTEX_LOCK_FILE/*\/}], nested mutexes are not allowed" >/dev/stderr && return 1
  export MUTEX_LOCK_FILE="$newMutex"
  mutex_dbg() { # {{{
    $MUTEX_DBG && echo "${MUTEX_LOCK_FILE/*\/} $(date +"$DATE_FMT") $@" >/dev/stderr
  } # }}}
  mutex_lock() { # {{{
    local timeout=${1:-0}
    mutex_dbg "Locking (wait=$timeout)"
    if [[ -e $MUTEX_LOCK_FILE && $MUTEX_ACCESS_MIN_DELTA -gt 0 ]]; then
      local accessTime=$(stat -c %Y $MUTEX_LOCK_FILE)
      local currentTime="$(date +"%s")"
      mutex_dbg "Mutex already exists, (at=$accessTime, ct=$currentTime, d=$MUTEX_ACCESS_MIN_DELTA)"
      if [[ $(($accessTime + $MUTEX_ACCESS_MIN_DELTA)) -lt $currentTime ]]; then
        mutex_dbg "Removing old mutex"
        rm -rf $MUTEX_LOCK_FILE
      fi
    fi
    local time=$(( $(date +%s) + $timeout ))
    local ct=0
    while [[ $ct -lt $time ]]; do
      if command mkdir $MUTEX_LOCK_FILE 1>/dev/null 2>&1; then
        mutex_dbg "Mutex locked"
        export MUTEX_CREATED=true
        return 0
      fi
      sleep "$(echo $RANDOM | awk '{print 0.2 + ( $1 % 10 ) / 15}')"
      ct=$(date +%s)
    done
    mutex_dbg "Mutex not locked"
    return 1
  } # }}}
  mutex_unlock() { # {{{
    mutex_dbg "Unlocking (created=$MUTEX_CREATED)"
    $MUTEX_CREATED && rm -rf $MUTEX_LOCK_FILE
    local err=$?
    mutex_dbg "Mutex unlocked ($err)"
    return $err
  } # }}}
  mutex_deinit() { # {{{
    mutex_dbg "De-initialization"
    export MUTEX_CREATED=false
    export MUTEX_LOCK_FILE=
    unset MUTEX_CREATED MUTEX_LOCK_FILE MUTEX_ACCESS_MIN_DELTA mutex_lock mutex_unlock mutex_deinit mutex_exit mutex_dbg
  } # }}}
  mutex_exit() { # {{{
    mutex_dbg "Exit trap"
    mutex_unlock
    mutex_deinit
    return 0
  } # }}}
  export -f mutex_lock mutex_unlock mutex_deinit mutex_exit
  export MUTEX_ACCESS_MIN_DELTA="$((10*60))"
  export MUTEX_CREATED=false
  export MUTEX_DBG=false
  local set_trap=true
  local clean_on_start=false
  [[ ! -e $LOCK_DIR ]] && command mkdir -p $LOCK_DIR
  shift
  while [[ ! -z $1 ]]; do
    case $1 in
    --auto-clean-after) export MUTEX_ACCESS_MIN_DELTA="${2:-60}"; shift;;
    --no-trap)          set_trap=false;;
    --clean-on-start)   clean_on_start=true;;
    --dbg)              MUTEX_DBG=true;;
    esac
    shift
  done
  mutex_dbg "Mutex initialized [$MUTEX_LOCK_FILE, clean=$clean_on_start, trap=$set_trap, delta=$MUTEX_ACCESS_MIN_DELTA)"
  $clean_on_start && rm -rf $MUTEX_LOCK_FILE
  $set_trap && trap 'mutex_exit' EXIT
} # }}}

