#!/usr/bin/env bash
# vim: fdl=0

PS1_envUpdater() { # {{{
  local list="$(command cd $BASHRC_RUNTIME_PATH; set +f; find . -maxdepth 1 -type f -name 'aliases-*.dump' -not -name '*-local.dump')" i= t= ts=
  for i in $list; do
    local t=${i#./aliases-} && t=${t%.dump} && t=${t//-/_}
    local -n tsRef=ALIASES_TS_${t^^}
    local ts="$(command stat -c %Y "$BASHRC_RUNTIME_PATH/$i")"
    ${PS1_DEBUG:-false} && echor "name: ALIASES_TS_${t^^}: ts:$ts ts-ref:$tsRef"
    if [[ $ts -gt ${tsRef:-0} ]]; then
      source "$BASHRC_RUNTIME_PATH/$i"
      tsRef=$ts
    fi
  done
} # }}}
PS1_getColor() { # {{{
  case $1 in
  err-*)    if [[ ${1/err-} == '0' ]]; then
              if [[ ! -z $BASH_PHISTORY_FILE && ! -z $HISTFILE && ( $HISTFILE == $HISTFILE_ORIG || $HISTFILE != *'/.history' ) ]]; then
                printf "\[$CIYellow\]"
              else
                if [[ ! -z $HISTFILE && $HISTFILE != $HISTFILE_ORIG && $HISTFILE == *'/.history' ]]; then
                  printf "\[$CIBlue\]"
                else
                  printf "\[$CIPurple\]"
                fi
              fi
            else
              printf "\[$CIRed\]"
            fi;;
  host)     printf "\[$CGold\]";;
  pwd)      printf "\[$CCyan\]";;
  git)      printf "\[$CIGreen\]";;
  off)      printf "\[$COff\]";;
  jobs)     printf "\[$CIRed\]";;
  j-r)      printf "\[$CIGreen\]";;
  j-s)      printf "\[$CGold\]";;
  cursor)   if ${PS1_CURSORS_CUSTOM:-true}; then
              [[ $PS1_CURSOR_COLOR != 'false' ]] && \
                printf "\[\e]12;${PS1_CURSOR_COLOR:-#00afaf}\a\]" # Set color to blue
              [[ $PS1_CURSORS_TYPE != 'false' ]] && \
                printf "\[\e[${PS1_CURSORS_TYPE:-2} q\]"          # Type(steady,blinking): block(1,2), underline(3,4), bar(5,6)
            fi;;
  *)        printf "%s" $(getColor $1);;
  esac
} # }}}
PS1_covertMode() { # {{{
  local mode=
  ${PS1_SHORTEN_PATH:-false} && mode='SHORTEN'
  case $1 in
  usuper_full)   mode+=' user';&
  super_full)    mode+=' host pwd jobs git';;
  default_ussh)  mode+=' user';&
  default_ssh)   mode+=' host';&
  default)       mode+=' pwd_tmux jobs git';;
  short)         mode+=' pwd_short jobs ';;
  short_git_ssh) mode+=' host';&
  short_git)     mode+=' pwd_short jobs git';;
  very_short)    mode+=' ';;
  *)             mode+=" $(eval printf "\$PS1_MODE_${1^^}")";;
  esac
  [[ "$PS1_ENV_MODE" != 'false' ]] && mode+=" ${PS1_ENV_MODE:-env-no-rec}"
  mode+=' prompt'
  [[ $TERM_ORIG != 'linux' ]] && mode+=' cursor'
  echo "$mode"
} # }}}
PS1_adjustPath() { # {{{
  local p="$1"
  [[ $p == $HOME* ]] && p=${p/#$HOME/~}
  ! ${shorten_path:-false} && printf "$p" && return 0
  local tmp=${p%/*}
  local last=${p/$tmp\/}
  local res=
  [[ $p == /* ]] && res="/"
  if [[ $tmp != $p ]]; then
    local i=
    for i in ${tmp//\// }; do
      if [[ $i == '...' ]]; then
        res+="$i"
      else
        res+="${i:0:1}"
      fi
      res+="/"
    done
  fi
  res+="$last"
  printf "$res"
  return 0
} # }}}
PS1_colorFormat() { # {{{
  local ret=
  [[ ! -z $2 ]] && ret+="$(PS1_getColor "$1")$2$cOff"
  [[ ! -z $3 ]] && ret+="$3"
  echo "$ret"
} # }}}
PS1_setter() { # {{{
  BASH_LAST_ERR=$?
  declare BASH_LAST_CMD=$_
  set +xv
  if [[ -e "$PWD" ]]; then # {{{
    local ino="$(command ls -id "$PWD" 2>/dev/null)"
    if [[ "$PWD" == "$PS1_LAST_PWD" ]]; then
      if [[ -z "$ino" || "$ino" != "$PS1_LAST_PWD_INO" ]]; then
        local oPWD=$OLDPWD
        command cd "$PWD"
        OLDPWD="$oPWD"
        export PS1_LAST_PWD_INO="$(command ls -id "$PWD" 2>/dev/null)"
        echorm -f?- || echor "Directory has changed"
      fi
    else
      export PS1_LAST_PWD="$PWD"
      export PS1_LAST_PWD_INO="$ino"
    fi
  else
    unset PS1_LAST_PWD PS1_LAST_PWD_INO
  fi # }}}
  if ${PS1_RESET_ERROR:-false}; then # {{{
    if [[ "$BASH_LAST_CMD" == "$BASH_LAST_LAST_CMD" ]]; then
      if [[ "$BASH_LAST_ERR" == "$BASH_LAST_LAST_ERR" ]]; then
        BASH_LAST_ERR=0 BASH_LAST_ERR_CLEARED=true
      elif ${BASH_LAST_ERR_CLEARED:-false}; then
        BASH_LAST_ERR=0
      fi
    else
      BASH_LAST_ERR_CLEARED=false
      BASH_LAST_LAST_CMD="$BASH_LAST_CMD"
    fi
    BASH_LAST_LAST_ERR="$BASH_LAST_ERR"
  fi # }}}
  local cOff="$(PS1_getColor 'off')"
  PS1=
  # ps $PPID | command grep mc >/dev/null 2>&1 && PS1="mc|"
  local shorten_path=false
  local v=
  for v in $(PS1_covertMode "${PS1_STATUS/:*}"); do
    case $v in
    SHORTEN) # {{{
      shorten_path=true;; # }}}
    user) # {{{
      PS1+="\u@";; # }}}
    host) # {{{
      local name=${PS1_HOSTNAME:-$HOSTNAME} p=
      for p in $TMUX_REMOTE_PREFIXES; do
        name="${name/$p}"
      done
      [[ $name == $PS1_CONVERTER_HOST_NAME ]] && PS1+="$PS1_CONVERTER_HOST_V" && continue
      export PS1_CONVERTER_HOST_NAME="$name"
      export PS1_CONVERTER_HOST_V="$(PS1_colorFormat 'host' "${name^^}" '|')"
      PS1+="$PS1_CONVERTER_HOST_V";; # }}}
    pwd) # {{{
      if [[ ! -e $PWD ]]; then
        [[ $PWD == $PS1_CONVERTER_PWD_LAST ]] && PS1+="$PS1_CONVERTER_V_PWD" || PS1+="${PWD##*/}"
        PS1+="|$(PS1_colorFormat err "ne")"
        continue
      fi
      [[ $PWD == $PS1_CONVERTER_PWD_LAST ]] && PS1+="$PS1_CONVERTER_V_PWD" && continue
      export PS1_CONVERTER_PWD_LAST="$PWD"
      export PS1_CONVERTER_V_PWD="$(PS1_colorFormat 'pwd' "$p")"
      PS1+="$PS1_CONVERTER_V_PWD";; # }}}
    pwd_tmux) # {{{
      if [[ ! -e $PWD ]]; then
        [[ $PWD == $PS1_CONVERTER_PWD_LAST ]] && PS1+="$PS1_CONVERTER_PWD_V_TMUX" || PS1+="${PWD##*/}"
        PS1+="|$(PS1_colorFormat err "ne")"
        continue
      fi
      [[ $PWD == $PS1_CONVERTER_PWD_LAST ]] && PS1+="$PS1_CONVERTER_PWD_V_TMUX" && continue
      export PS1_CONVERTER_PWD_LAST="$PWD"
      local p=
      if [[ -n $TMUX ]]; then
        case $PWD in
        $HOME) p='~';;
        /)     p='/';;
        *)     local tmp="$PWD"
               local ps1_ignored=$PS1_IGNORED
               if [[ -z $ps1_ignored ]]; then
                 ps1_ignored="$(tmux show-options -v @tmux_path 2>/dev/null)"
                 [[ $ps1_ignored == $HOME || $ps1_ignored == '/' ]] && ps1_ignored=
               fi
               if [[ ! -z $ps1_ignored && $tmp == $ps1_ignored* ]]; then
                 tmp=".../${tmp/#$ps1_ignored/${ps1_ignored/*\/}}"
                 [[ $ps1_ignored == $HOME* ]] && tmp="~/$tmp"
               fi
               p="$(PS1_adjustPath "$tmp")";;
        esac
      else
        p=$(PS1_adjustPath "$PWD")
      fi
      export PS1_CONVERTER_PWD_V_TMUX="$(PS1_colorFormat 'pwd' "$p")"
      PS1+="$PS1_CONVERTER_PWD_V_TMUX";; # }}}
    pwd_short) # {{{
      if [[ ! -e $PWD ]]; then
        [[ $PWD == $PS1_CONVERTER_PWD_LAST ]] && PS1+="$PS1_CONVERTER_V_SHORT" || PS1+="${PWD##*/}"
        PS1+="|$(PS1_colorFormat err "ne")"
        continue
      fi
      [[ $PWD == $PS1_CONVERTER_PWD_LAST ]] && PS1+="$PS1_CONVERTER_V_SHORT" && continue
      export PS1_CONVERTER_PWD_LAST="$PWD"
      local p=
      case $PWD in
      $HOME) p='~';;
      /)     p='/';;
      *)     p="${PWD/*\/}";;
      esac
      export PS1_CONVERTER_V_SHORT="$(PS1_colorFormat 'pwd' "$p")"
      PS1+="$PS1_CONVERTER_V_SHORT";; # }}}
    jobs) # {{{
      [[ -e $PWD ]] || continue
      ${PS1_CONVERTER_JOBS_SKIP:-false} && continue
      if [[ ! -z $(jobs -p) ]]; then
        sleep 0.05
        local jobs_r=$(jobs -rp)
        local jobs_s=$(jobs -sp)
        if [[ ! -z $jobs_r || ! -z $jobs_s ]]; then
          PS1+="$(PS1_colorFormat 'jobs' "[")"
          if [[ ! -z $jobs_r ]]; then
            PS1+="$(PS1_colorFormat 'j-r' "$(echo "$jobs_r" | wc -l | xargs)")"
          fi
          if [[ ! -z $jobs_s ]]; then
            [[ ! -z $jobs_r ]] && PS1+="$(PS1_colorFormat 'jobs' "/")"
            PS1+="$(PS1_colorFormat 'j-s' "$(echo "$jobs_s" | wc -l | xargs)")"
          fi
          PS1+="$(PS1_colorFormat 'jobs' "]")"
        fi
      fi;; # }}}
    git) # {{{
      [[ -e $PWD ]] || continue
      ${PS1_CONVERTER_GIT_SKIP:-false} && continue
      local l="$(__git_ps1 "%s")"
      if [[ ! -z "$l" ]]; then
        l=${l#(} && l=${l%)}
        [[ $l =~ ^(remotes|tags)/(.*) ]] && l=${BASH_REMATCH[2]}
        l="($l"
        PS1+="$(PS1_colorFormat 'git' "$l")"
        PS1+="$(PS1_colorFormat 'git' ")")"
      fi;; # }}}
    prompt) # {{{
      local sign='\$'
      ${PS1_DEBUG:-false} && set -xv
      if [[ ! -n $PS1_PSTREE_INSTALLED ]]; then
        export PS1_PSTREE_INSTALLED=true
        which pstree >/dev/null 2>&1 || PS1_PSTREE_INSTALLED=false
      fi
      if [[ ( ! -n $TMUX && $SHLVL -gt 1 ) || $SHLVL -gt 3 ]]; then
        local vv="PS1_SIGN_${$}"
        local v=${!vv}
        local bashCnt=0
        if [[ -z $v ]]; then
          if $PS1_PSTREE_INSTALLED; then
            local param="-a -s"
            $IS_MAC && param=
            local cmd="pstree $param -p $$ | sed -n --silent '1,/'$$'$/p'"
            if $IS_MAC; then
              cmd+=" | sed -n '/= \([0-9]\+\) .*bash$/s/.*= \([0-9]\+\) .*bash/\1/p'"
            else
              cmd+=" | sed -n '/bash,[0-9]\+$/s/.*,//p'"
            fi
            cmd+=" | xargs ps -f -p | grep -c -e 'bash'"
            if ${PS1_DEBUG:-false} || ${PS1_DEBUG2:-false}; then
              echo "$cmd" >/dev/stderr
            fi
            bashCnt="$(eval $cmd)"
          else
            local p=$$ c=
            while true; do
              case "$(command ps -o cmd= $p)" in
              tmux\ *) break;;
              /bin/bash\ *) ;;
              *bash*)  bashCnt=$((bashCnt + 1));;
              esac
              p=$(echo $(command ps -o ppid= $p)) || break
              [[ $p == 1 || $p == 0 ]] && break
            done
          fi
          local forDocker=0
          $IS_DOCKER && forDocker=1
          bashCnt=$((bashCnt - forDocker - ${PS1_EXTRA_BASH:-0}))
          if [[ $bashCnt -gt 1 ]]; then
            v='@'
            if ${BASH_USE_UNICODE_FOR_NESTED_BASH:-true}; then
              v="${UNICODE_EXTRA_CHARS[nested_bash]}" a=$((bashCnt - 1))
              [[ $a -gt 20 ]] && a=20
              v="$(printf "%d" "'$v")"
              v="$(printf "\U$(printf '%08x' "$((v+a-1))")")"
            else
              [[ $((bashCnt - 1)) -gt 1 ]] && v+=$((bashCnt - 1))
            fi
            sign="$v"
          fi
          eval export PS1_SIGN_${$}=$sign
        else
          sign=$v
        fi
      fi
      ${PS1_DEBUG:-false} && set +xv
      PS1+="$(PS1_colorFormat "err-$BASH_LAST_ERR" "$sign" " ")";; # }}}
    cursor) # {{{
      PS1+="$(PS1_getColor 'cursor')";; # }}}
    env | env-no-rec) # {{{
      if [[ -e "$PWD" && "$PS1_ENV_PWD" != "$PWD" ]]; then
        cd_go_up() { # {{{
          local p="$1"
          [[ -z $p || ! -d $p ]] && return 0
          [[ $p != "$PS1_ENV_PWD" && $p == $HOME/* && $v == 'env' ]] && cd_go_up "${p%/*}"
          [[ -e "$p/.env-setup.sh" ]] && source "$p/.env-setup.sh"
          [[ -e "$p/.env" ]] && source "$p/.env"
        } # }}}
        cd_go_up "$PWD"
        unset cd_go_up
        if [[ ${PS1_HIST_CHANGE_TO_LOCAL:-true} && $HISTFILE == $HISTFILE_ORIG && -e $PWD/.history ]]; then # {{{
          [[ -z $BASH_ORIG_HISTFILE ]] && export BASH_ORIG_HISTFILE="$HISTFILE"
          export HISTFILE="$PWD/.history"
        fi # }}}
        export PS1_ENV_PWD="$PWD"
      fi;; # }}}
    *) # {{{
      PS1+="$(eval printf "\$$v")";; # }}}
    esac
  done
  export PS1
} # }}}
ps1_toggle() { # @@ # {{{
  local i=
  local fullName=, shortName=
  local oldIFS=$IFS
  if [[ $1 == '@@' ]]; then # {{{
    local ret="next hl hn hr ht $(echo hist-{local,no,no-pers,restore,stat}) gt"
    for i in ${PS1_MODES[*]}; do
      IFS=':' read fullName shortName <<<"$i"
      ret+=" $fullName"
    done
    echo "$ret"
    IFS=$oldIFS
    return 0
  fi # }}}
  # Toggles # {{{
  case $1 in
  gt) # {{{
    if ${PS1_CONVERTER_GIT_SKIP:-false}; then
      export PS1_CONVERTER_GIT_SKIP=false
    else
      export PS1_CONVERTER_GIT_SKIP=true
    fi
    return 0;; # }}}
  hist-local | hist-no | hist-no-pers | hist-restore | hist-stat | hl | hn | ht | hr) # {{{
    local cmd="$1"
    if [[ "$cmd" == 'ht' ]]; then
      [[ ! -z $BASH_PHISTORY_FILE ]] && cmd='hn' || cmd='hr'
    fi
    case $cmd in
    hist-local | hl) # {{{
      [[ -z $BASH_ORIG_PHISTORY_FILE ]] && export BASH_ORIG_PHISTORY_FILE="$BASH_PHISTORY_FILE"
      [[ -z $BASH_ORIG_HISTFILE ]] && export BASH_ORIG_HISTFILE="$HISTFILE"
      [[ -z $BASH_ORIG_HISTIGNORE ]] && export BASH_ORIG_HISTIGNORE="$HISTIGNORE"
      unset BASH_PHISTORY_FILE
      export HISTFILE="$PWD/.history"
      [[ -e $PWD/.history.ign && ! -e $PWD/.history ]] && export HISTFILE="$PWD/.history.ign";; # }}}
    hist-no | hn) # {{{
      [[ -z $BASH_ORIG_PHISTORY_FILE ]] && export BASH_ORIG_PHISTORY_FILE="$BASH_PHISTORY_FILE"
      [[ -z $BASH_ORIG_HISTFILE ]] && export BASH_ORIG_HISTFILE="$HISTFILE"
      [[ -z $BASH_ORIG_HISTIGNORE ]] && export BASH_ORIG_HISTIGNORE="$HISTIGNORE"
      unset BASH_PHISTORY_FILE HISTFILE HISTIGNORE;; # }}}
    hist-no-pers) # {{{
      [[ -z $BASH_ORIG_PHISTORY_FILE ]] && export BASH_ORIG_PHISTORY_FILE="$BASH_PHISTORY_FILE"
      unset BASH_PHISTORY_FILE;; # }}}
    hist-restore | hr) # {{{
      [[ ! -z $BASH_ORIG_PHISTORY_FILE ]] && export BASH_PHISTORY_FILE="$BASH_ORIG_PHISTORY_FILE"
      [[ ! -z $BASH_ORIG_HISTFILE ]] && export HISTFILE="$BASH_ORIG_HISTFILE"
      [[ ! -z $BASH_ORIG_HISTIGNORE ]] && export HISTIGNORE="$BASH_ORIG_HISTIGNORE"
      unset BASH_ORIG_PHISTORY_FILE BASH_ORIG_HISTFILE BASH_ORIG_HISTIGNORE;; # }}}
    esac
    history -r
    [[ ${#cmd} == 2 ]] && return 0
    echo "ph=[$BASH_PHISTORY_FILE]" >/dev/stderr
    echo "hi=[$HISTFILE]" >/dev/stderr
    return 0;; # }}}
  esac # }}}
  local current=
  local next=
  IFS=':' read current next <<<"$PS1_STATUS"
  if [[ ! -z $1 ]]; then # {{{
    next=
    if [[ $1 == 'next' ]]; then
      next="next"
    else
      for i in ${PS1_MODES[*]}; do
        IFS=':' read fullName shortName <<<"$i"
        [[ $1 == $fullName || $1 == $shortName ]] && next="$fullName" && break
      done
    fi
    IFS=$oldIFS
    [[ -z $next ]] && return 1
    [[ $next == $current ]] && return 0
  fi # }}}
  if [[ $next == 'next' ]]; then # {{{
    for i in ${!PS1_MODES[*]}; do
      IFS=':' read fullName shortName <<<"${PS1_MODES[$i]}"
      if [[ $current == $fullName ]]; then
        i=$(( ($i + 1) % ${#PS1_MODES[*]}))
        IFS=':' read fullName shortName <<<"${PS1_MODES[$i]}"
        next=$fullName
        break
      fi
    done
    echorm -C 0 "Changing PS1 to %yellow:{$next}"
  fi # }}}
  export PS1_STATUS="$next:$current"
  IFS=$oldIFS
} # }}}
ps1_fix() { # {{{
  local current=$PROMPT_COMMAND
  PROMPT_COMMAND=$PROMPT_COMMAND_ORIG
  [[ $current != PS1_setter* ]] && PROMPT_COMMAND+="; $current"
  export PROMPT_COMMAND
} # }}}

alias pt='ps1_toggle' # @@
alias gt='ps1_toggle gt'
alias pth='ps1_toggle ht'
export HISTIGNORE+=":pt:pth:gt"
