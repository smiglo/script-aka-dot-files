#!/usr/bin/env bash
# vim: fdl=0

progress() { # @@ # {{{
  if [[ $1 == '@@' ]]; then # {{{
    local retVal='--cmd --delay --msg --cnt --key --get-key --keys --every-step --out --color --pv --dots --spin --err --no-err --dbg --dbg2 --end-msg --steps --tmux --tmux-only --mark --unmark --wait --wait-pv --clean'
    echo "$retVal"
    return 0
  fi # }}}
  # Init {{{
  [[ -z $COff ]] && source $BASH_PATH/colors
  local cmd= delay= msg= cnt=0 every=false steps= dbg= endTime=
  local use_pv=false use_dots=false use_spin=false
  local out="/dev/stdout" color="${CHLSearch}" end_message="DONE:BREAK"
  local key=false get_key=false pressed_key= extra_keys=
  local mark_file="$TMP_MEM_PATH/progress-$PPID.tmp" do_mark=false
  local tmux_progress=false tmux_entry="PR#$PPID" tmux_text="P[%s]" tmux_progress_only=false
  local report_error=true retVal=0
  if [[ -z $PROGRESS_DOTS_SUPPORTED ]]; then # {{{
    PROGRESS_DOTS_SUPPORTED=true
    if [[ ! -z $LC_CTYPE ]] && ! echo "$LC_CTYPE" | command grep -q "UTF-8"; then
      PROGRESS_DOTS_SUPPORTED=false
    elif which locale >/dev/null 2>&1 && ! locale | command grep -q "LC_CTYPE=.*UTF-8"; then
      PROGRESS_DOTS_SUPPORTED=false
    fi
  fi # }}}
  set -- $PROGRESS_PARAMS "$@"
  while [[ ! -z $1 ]]; do # {{{
    case $1 in
    --cmd)        shift; cmd=$1;;
    --clean)      rm -f $TMP_MEM_PATH/progress-*; return 0;;
    --delay)      shift; delay=$1;;
    --msg)        shift; msg=$1;;
    --cnt)        shift; cnt=$1;;
    --out)        shift; out=$1;;
    --color)      shift; color=$1;;
    --end-msg)    shift; end_message=$1;;
    --steps)      shift; steps=$1;;
    --no-err)     report_error=false;;
    --err)        report_error=true;;
    --key)        key=true; report_error=false;;
    --keys)       shift; extra_keys=$1;&
    --get-key)    get_key=true;;
    --every-step) every=true;;
    --pv)         use_pv=true;;
    --dots)       use_dots=${PROGRESS_DOTS_SUPPORTED:-true};;
    --spin)       use_spin=true;;
    --tmux-only) # {{{
                  if ! $do_mark; then
                    progress --mark-raw "$@"
                    return 0
                  fi
                  tmux_progress_only=true
                  ;;& # }}}
    --tmux | --tmux-only) # {{{
                  tmux_progress=true
                  [[ ! -z "$2" && "$2" != '--'* ]] && tmux_text="$2" && shift
                  [[ $tmux_text == '-' ]] && tmux_text=""
                  ;; # }}}
    --mark)       shift; progress --mark-raw "$@" & :; return 0;;
    --mark-f)     shift; mark_file="$TMP_MEM_PATH/progress-$1.tmp"; tmux_entry="PR#$1";;&
    --mark-raw | \
    --mark-f)     touch $mark_file; echo "$@" >$mark_file; cmd="[[ ! -e $mark_file ]]"; do_mark=true; every=true;;
    --unmark)     shift; local delay= err=0
                  while [[ ! -z $1 ]]; do # {{{
                    case $1 in
                    --err*) err=$1; err=${err#--err-}; err=${err#--err};;
                    *)      mark_file="$TMP_MEM_PATH/progress-$1.tmp" && tmux_entry="PR#$1";;
                    esac
                    shift
                  done # }}}
                  [[ $err != 0 ]] && echo "$err" >"${mark_file%.tmp}.err.tmp"
                  [[ -e $mark_file ]] && set -- $(cat $mark_file)
                  while [[ ! -z $1 ]]; do # {{{
                    case $1 in
                    --delay) delay=$2; shift;;
                    --pv)    use_pv=true;;
                    --dots)  use_dots=true;;
                    --spin)  use_spin=true;;
                    --tmux | --tmux-only) tmux_progress=true;;
                    esac
                    shift
                  done # }}}
                  if [[ -z $delay ]]; then # {{{
                    if $use_dots; then
                      delay=0.15
                    elif $use_pv; then
                      delay=1
                    else
                      delay=1
                    fi
                  fi # }}}
                  if $use_spin && [[ $(echo $delay | awk '{print $1 * 100}') -lt 50 ]]; then # {{{
                    delay=0.5
                  fi # }}}
                  rm -f $mark_file
                  $tmux_progress && $ALIASES tmux_progress $tmux_entry end 0
                  sleep $delay; return ${err:-20};;
    --wait-pv)    use_pv=true; report_error=false;&
    --wait)       shift;
                  endTime="$($ALIASES time2s -o abs-s $1)"; every=true;;
    --dbg)        dbg="l1";;
    --dbg2)       dbg="l2";;
    *)            msg="$1";;
    esac
    shift
  done # }}}
  $get_key && [[ $out == '/dev/stdout' ]] && out='/dev/stderr'
  if ! $use_spin && ! $use_dots && ! $use_pv; then # {{{
    if $every || [[ $(echo $delay | awk '{print $1 * 100}') -le 25 ]]; then
      use_dots=${PROGRESS_DOTS_SUPPORTED:-true}
    fi
  fi # }}}
  if [[ -z $delay ]]; then # {{{
    if $use_dots; then
      delay=0.15
    elif $use_pv; then
      delay=1
    else
      delay=1
    fi
  fi # }}}
  if [[ -z $steps ]]; then # {{{
    $use_dots && steps=10 || steps=4
  fi # }}}
  if $use_spin && [[ $(echo $delay | awk '{print $1 * 100}') -lt 50 ]]; then # {{{
    delay=0.5
  fi # }}}
  # }}}
  if $tmux_progress; then
    eval $ALIASES tmux_progress $tmux_entry $([[ ! -z $tmux_text ]] && echo "--text \"$tmux_text\"")
    $tmux_progress_only && return 0
  fi
  if $use_pv; then # PV mode # {{{
    local fName="$TMP_MEM_PATH/progress-pv-$$.tmp" writes="$cnt" do_break=false pkey=
    rm -f "$fName" && touch "$fName"
    [[ ! -z $msg ]] && echo "$msg " >>$out
    echo -n "${color}" >>$out
    if [[ ! -z $endTime ]]; then
      cnt="$(echo "$((endTime-$(command date +'%s'))) $delay" | awk '{print $1/$2}')"
      writes="$cnt"
    fi
    for ((; cnt>=0; --cnt)); do
      [[ -e "$fName" && $writes -gt 0 ]] && echo -n "." >>"$fName" && : $((--writes))
      if ! $do_break && [[ ! -z $cmd ]]; then # {{{
        eval $cmd >/dev/null 2>&1 && do_break=true
      fi # }}}
      if ! $do_break; then # {{{
        if $key; then
          if read -s -t $delay -n 1 pkey </dev/tty >/dev/null; then
            retVal=$((10+2))
            case $pkey in
            n|N|q|Q) retVal=255; do_break=true;;
            '')      do_break=true;;
            *)       echo "$extra_keys" | command grep -sq "$pkey" && do_break=true
            esac
            $do_break && pressed_key=$pkey
          fi
        else
          sleep $delay
        fi
      fi # }}}
      if $do_break || [[ $cnt == 1 ]]; then # {{{
        if [[ -e "$fName" ]]; then
          [[ $writes -gt 0 ]] && echo -n "." >>"$fName" && : $((--writes))
          rm -f "$fName"
        else
          echo "$retVal $pressed_key" >"$fName"
          break
        fi
      fi # }}}
    done | tail -s 0.1 --follow=name "$fName" 2>/dev/null | pv -s $cnt -i $(echo "$delay" | awk '{print $1/2}') -t -e --progress | cat - >/dev/null
    echo -n "${COff}" >>$out
    retVal=0 pressed_key=
    [[ -e "$fName" ]] && { read retVal pressed_key <<< $(cat "$fName"); rm -f "$fName"; }
    if ! $report_error; then # {{{
      case $retVal in
      0|10|11|12) retVal=0;;
      esac
    fi # }}}
    $get_key && echo "$pressed_key"
    $tmux_progress && $ALIASES tmux_progress $tmux_entry end $retVal
    return $retVal
  fi # }}}
  [[ -z $cmd ]] && key=true && cmd=false
  local chars=() local charIdx=0
  if $use_dots; then # Dots mode # {{{
    genChars() {
      chars=()
      local i=
      if [[ -e $TMP_PATH/.progress-dots ]]; then
        source $TMP_PATH/.progress-dots
      else
        for ((i=1; i<0xFF; i++)); do chars+=("$(printf "%x" $((0x2800+$i)))"); done
        echo "chars=(${chars[*]})" >$TMP_PATH/.progress-dots
      fi
    }
    nextChar()    { local l=${#chars[*]}; charIdx=$((($charIdx+1+$RANDOM%($l-1))%$l)); }
    getChar()     { echo -en "\u${chars[$charIdx]}"; }
    getLastChar() { echo -en "\u28ff"; }
    # }}}
  else # Spin mode # {{{
    genChars() { chars=('-' '\' '|' '/'); }
    nextChar() { charIdx=$((($charIdx + 1) % ${#chars[*]})); }
    getChar()  { echo -en "${chars[$charIdx]}"; }
    getLastChar() {
      local msg='   '
      case $1 in
      0|10|11|12) [[ ! -z "${end_message/:*}" ]] && msg="${end_message/:*}";;
      *)          [[ ! -z "${end_message/*:}" ]] && msg="${end_message/*:}";;
      esac
      echo -ne "$msg"
    }
  fi # }}}
  cleanChars() { unset charIdx chars; unset -f genChars getChar getLastChar nextChar; }
  genChars
  local i=0 chpid=
  [[ ! -z $msg ]] && echo -n "$msg " >>$out
  echo -en "${color}[$(getChar)]${COff}" >>$out
  if [[ ! -z $dbg ]]; then # {{{
    echo >/dev/stderr
    echo "cmd=($cmd)" >/dev/stderr
    echo >/dev/stderr
  fi # }}}
  if [[ $out != '/dev/stderr' && "$cmd" != 'false' ]] && ! $do_mark; then # {{{
    exec 3>&2
    exec 2> /dev/null
  fi # }}}
  while true; do # {{{
    if [[ ! -z $chpid ]] && ! command ps -o pid | command grep -q "$chpid"; then # {{{
      wait $chpid && { chpid=; break; } || chpid=
    fi # }}}
    if $every || [[ $i == 0 ]]; then # {{{
      if [[ ! -z $dbg ]]; then
        case $dbg in
        l1) eval $cmd && break;;
        l2) ( set -xv; eval $cmd && set +xv && break; );;
        esac
      else
        if [[ $out != '/dev/stderr' && "$cmd" != 'false' ]] && ! $do_mark; then
          if [[ -z $chpid ]]; then
            ( eval $cmd >/dev/null 2>&1 ) &
            chpid=$!
          fi
        else
          eval $cmd >/dev/null 2>&1 && break
        fi
      fi
      if [[ ! -z $endTime && $(command date +'%s') -gt $endTime ]]; then
        [[ $cmd == 'false' ]] && retVal=$((10+1)) || retVal=1
        break
      fi
    fi # }}}
    if $key; then # {{{
      if read -s -t $delay -n 1 pressed_key; then
        retVal=$((10+2))
        local do_break=false
        case $pressed_key in
        n|N|q|Q) retVal=255; do_break=true;;
        '')      do_break=true;;
        *)       echo "$extra_keys" | command grep -sq "$pressed_key" && do_break=true
        esac
        $do_break && break
      fi
      # }}}
    else # {{{
      sleep $delay
    fi # }}}
    i=$(( ($i + 1) % $steps))
    nextChar
    echo -ne "\b\b\b${color}[$(getChar)]${COff}" >>$out
    if [[ $cnt != 0 ]]; then # {{{
      cnt=$(( $cnt - 1 ))
      if [[ $cnt == 0 ]]; then
        [[ $cmd == 'false' ]] && retVal=$((10+1)) || retVal=1
        break
      fi
    fi # }}}
  done # }}}
  if [[ ! -z $chpid ]] && ! command ps -o pid | command grep -q "$chpid"; then # {{{
    wait $chpid
  fi # }}}
  if [[ $out != '/dev/stderr' && "$cmd" != 'false' ]] && ! $do_mark; then # {{{
    exec 2>&3
    exec 3>&-
  fi # }}}
  if $do_mark && [[ -e "${mark_file%.tmp}.err.tmp" ]]; then
    retVal=20
    [[ -s "${mark_file%.tmp}.err.tmp" ]] && retVal="$(cat "${mark_file%.tmp}.err.tmp")"
    rm "${mark_file%.tmp}.err.tmp"
  fi
  case $retVal in # {{{
  0|10|11|12) # {{{
    [[ $color != ${COff} ]] && color=${CIGreen}
    echo -ne "\b\b\b" >>$out
    echo -ne "${color}[$(getLastChar $retVal)]${COff}" >>$out
    echo >>$out
    ;; # }}}
  *) # {{{
    [[ $color != ${COff} ]] && color=${CIRed}
    echo -ne "\b\b\b" >>$out
    echo -ne "${color}[$(getLastChar $retVal)]${COff}" >>$out
    echo >>$out
    ;; # }}}
  esac # }}}
  cleanChars
  $get_key && echo "$pressed_key"
  if ! $report_error; then # {{{
    case $retVal in
    0|10|11|12) retVal=0;;
    esac
  fi # }}}
  $tmux_progress && $ALIASES tmux_progress $tmux_entry end $retVal
  return $retVal
} # }}}

