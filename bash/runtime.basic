#!/usr/bin/env bash
# vim: fdl=0

# Clear appended variables {{{
export ALIASES_MAP=
export BASH_EXTRA_FEATURES=
export BASH_UPDATE_REPOS=
export BASH_UPDATE_TIME=
export COMPLETION_GENERIC_UTILS=
export COMPLETION_GENERIC_FUNCTIONS=
export CD_INTERACTIVE_PREDEFINED_LIST=
export CD_INTERACTIVE_USER_LIST=
export CD_LAST_DIRS_INTERACTIVE_IGNORE=
export CD_LAST_DIRS_STORED=
export CLANG_PARAMS_COMMON="-g -O0"
export CLANG_PARAMS_W="-Wall -Wno-disabled-macro-expansion -Wno-writable-strings"
export CLANG_PARAMS="-std=c99"
export CLANGPP_PARAMS="-std=c++11"
export GIT_LOG_ALL_PARAMS=
export GIT_LOG_PARAMS=
export GIT_PRE_COMMIT_DEBUGS=
export GIT_PRE_COMMIT_IGNORE=
export GIT_PRE_COMMIT_REPO_WHITELIST=
export GIT_PRE_COMMIT_REPO_BLACKLIST=
export GIT_REPOS=
export GREP_EXCLUDES=
export HISTIGNORE=
export HISTIGNORE+=" *"
export HISTIGNORE+=":ls:ll:pwd:pwd *:cd"
export HISTIGNORE+=":fg:bg:jobs:ps"
export HISTIGNORE+=":echo:reset:clear:exit*"
export HISTIGNORE+=":keep-pass.sh*:./keep-pass.sh*"
export HISTIGNORE+=":reboot:reboot *:shutdown:shutdown *"
export HL_DEFAULTS=
export INSTALL_FEATURES=
export KB_PATHS=
export KEEP_PASS_JOURNALS=
export MANPATH=
export PHISTORY_IGNORED_COMMANDS=
export PHISTORY_IGNORED_COMMANDS+="exec"
export PHISTORY_IGNORED_COMMANDS+=":ls:ll:cd"
export PHISTORY_IGNORED_COMMANDS+=":@vi@:@vim@:@gvi@:@gvim@:vim-session"
export PHISTORY_IGNORED_COMMANDS+=":$BIN_PATH:$BASH_PATH:./bash/aliases\ *"
export PHISTORY_IGNORED_COMMANDS+=":sendMsg"
export PS1_ENV_PWD=
export SCRIPT_PATH=
export SHARABLE_PATH=
export SHARED_BASH_PATH=
export SSH_KEYS=
export TICKET_J_PREDEFINED=
export TICKET_TOOL_POST_ENV=
export TMUX_FINGERS_PREDEFINED=
export TMUX_FINGERS_PREDEFINED+=" ([[:digit:]]{4,})"                                                                                  # Number
export TMUX_FINGERS_PREDEFINED+=" 0x([0-9a-f]+)"                                                                                      # Hex
export TMUX_FINGERS_PREDEFINED+=" ([0-9a-f]{7,40})"                                                                                   # SHA
export TMUX_FINGERS_PREDEFINED+=" ((^|^\.|[[:space:]]|[[:space:]]\.|[[:space:]]\.\.|^\.\.)[[:alnum:]~_-]*/[][[:alnum:]_.#$%&+=/@-]+)" # Path
export TMUX_FINGERS_PREDEFINED+=" ((https?://|git@|git://|ssh://|ftp://|file:///)[[:alnum:]?=%/_.:,;~@!#$&()*+-]*)"                   # URL
export TMUX_FINGERS_REGEX=
export TMUX_INIT_SESSIONS=
export TMUX_REMOTE_PREFIXES=
export TMUX_STATUS_LEFT_EXTRA_MAP=
export TMUX_STATUS_RIGHT_EXTRA=
export TMUX_SWITCH_CLIENT_MAP=
export TO_INSTALL_BIN_MISC='BASIC'
export TO_INSTALL_TOOLS=
export TO_INSTALL_TOOLS_EXTRA=
export VIM_CTRLP_IGNORE_DIRS="NOT_EXISTING_DIR_PATTERN_TO_IGNORE"
export VIM_PRJ_EXCLUDE=
export VIM_PRJ_PARAMS=
# }}}
# BIN_PATH & BASH_PATH # {{{
export BIN_PATH="${BIN_PATH:-$HOME/.bin}"
export BASH_PATH="${BASH_PATH:-$BIN_PATH/bash}"
# }}}
# MY_PROJ_PATH setup{{{
export MY_PROJ_PATH=$HOME/projects/my
[[ ! -e $MY_PROJ_PATH ]] && export MY_PROJ_PATH=$HOME/projects
if [[ -e $MY_PROJ_PATH ]]; then
  export SCRIPT_PATH=$MY_PROJ_PATH/scripts
  export BASH_UPDATE_REPOS="$MY_PROJ_PATH/scripts $MY_PROJ_PATH/vim"
  export BASH_UPDATE_TIME="$((1*18*60*60))"
  export GIT_REPOS+=" $MY_PROJ_PATH/scripts $MY_PROJ_PATH/info $MY_PROJ_PATH/vim"
  export CD_LAST_DIRS_STORED+=":s@$SCRIPT_PATH"
  [[ -e $MY_PROJ_PATH/vim  ]] && export CD_LAST_DIRS_STORED+=":vim@$MY_PROJ_PATH/vim"
  [[ -e $MY_PROJ_PATH/info ]] && export CD_LAST_DIRS_STORED+=":info@$MY_PROJ_PATH/info"
  [[ -e $MY_PROJ_PATH/.ticket-data.sh ]] && KB_PATHS+=" env:$MY_PROJ_PATH"
  [[ -e $MY_PROJ_PATH/sp/.ticket-data.sh ]] && KB_PATHS+=" sp:$MY_PROJ_PATH/sp"
  if [[ -e $MY_PROJ_PATH/oth/.ticket-data.sh ]]; then # {{{
    if [[ $MY_PROJ_PATH == */my && -e "$HOME/projects/oth" ]]; then
      KB_PATHS+=" oth-my:$MY_PROJ_PATH/oth"
      KB_PATHS+=" oth:$HOME/projects/oth"
    else
      KB_PATHS+=" oth:$MY_PROJ_PATH/oth"
    fi
  elif [[ -e "$HOME/projects/oth" ]]; then
    KB_PATHS+=" oth:$HOME/projects/oth"
  fi # }}}
  if [[ -e $MY_PROJ_PATH/tmp/.ticket-data.sh ]]; then # {{{
    if [[ $MY_PROJ_PATH == */my && -e "$HOME/projects/tmp" ]]; then
      KB_PATHS+=" tmp-my:$MY_PROJ_PATH/tmp"
      KB_PATHS+=" tmp:$HOME/projects/tmp"
    else
      KB_PATHS+=" tmp:$MY_PROJ_PATH/tmp"
    fi
  elif [[ -e "$HOME/projects/tmp" ]]; then
    KB_PATHS+=" tmp:$MY_PROJ_PATH/tmp"
  fi # }}}
else
  echo "Cannot find script path!" >/dev/stderr
  export MY_PROJ_PATH=
fi
# }}}
# Profiles # {{{
export PROFILES_PATH="$BASH_PATH/profiles"
export BASH_PROFILES="$(command cd $PROFILES_PATH 2>/dev/null; echo *)"
[[ $BASH_PROFILES == '*' ]] && export BASH_PROFILES=""
export BASH_PROFILES_FULL="$(command ls -d $PROFILES_PATH/* 2>/dev/null)"
# }}}
# TMP Paths # {{{
export TMP_PATH=$HOME/.tmp
export TMP_MEM_PATH=$TMP_PATH/.mem
export tm=$TMP_MEM_PATH
export TM=$TMP_MEM_PATH
export TMPDIR=$TMP_PATH/.tmp-dir
[[ ! -e $TMPDIR ]] && command mkdir -p $TMPDIR
[[ ! -e $TMP_MEM_PATH ]] && command mkdir -p $TMP_MEM_PATH
chmod 700 $TMPDIR $TMP_MEM_PATH
# }}}
# Runtime Path - Setup # {{{
export RUNTIME_PATH=$HOME/.runtime
[[ ! -e $RUNTIME_PATH ]] && command mkdir $RUNTIME_PATH
for i in $BASH_PROFILES; do
  [[ -e $RUNTIME_PATH/runtime-pre.bash.$i ]] && source $RUNTIME_PATH/runtime-pre.bash.$i
done
[[ -e $RUNTIME_PATH/runtime-pre.bash ]] && source $RUNTIME_PATH/runtime-pre.bash
[[ ! -e $RUNTIME_PATH/tmux-buffers ]] && command mkdir $RUNTIME_PATH/tmux-buffers
export CD_LAST_DIRS_STORED+=":rt@$RUNTIME_PATH"
export APPS_CFG_PATH=$RUNTIME_PATH/apps
[[ ! -e $APPS_CFG_PATH ]] && command mkdir $APPS_CFG_PATH
# }}}
# TMP Paths, cont. # {{{
export BASHRC_RUNTIME_PATH="$TMP_MEM_PATH/.bashrc"
[[ ! -e $BASHRC_RUNTIME_PATH ]] && command mkdir $BASHRC_RUNTIME_PATH
# }}}

