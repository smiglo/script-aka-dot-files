#!/usr/bin/env bash
# vim: fdl=0

# Check arguments and do really basics # {{{
__bashrc_exit() {
  local addInstalling=true addReturn=true retVal=0
  local v="unset -f fix_exports __bashrc_exit;"
  v+=" unset what_to_do verbose"
  while [[ ! -z $1 ]]; do
    case $1 in
    -) [[ $1 == '-' ]] && shift && addInstalling=false;;
    --nr)    addReturn=false;;
    -[0-9])  addReturn=true; retVal="${1#-}";;
    *)       v+=" $1";;
    esac
    shift
  done
  $addInstalling && v+=" RCSTUFF_BASHRC_INSTALLING"
  v+=";"
  $addReturn && v+=" return $retVal;"
  echo "$v"
}
what_to_do='full'
${RCSTUFF_FUNCTION_EXPORTED:-false} && what_to_do='basic'
verbose=false
[[ -z "$PS1" ]] && what_to_do="min" && $verbose && echo "Not interactive shell" >/dev/stderr
while [[ ! -z $1 ]]; do
  case $1 in
  --force)
    unset $(echo "${!RCSTUFF_*}" | tr ' ' '\n' | command grep "_INSTALLED$" | xargs)
    unset RCSTUFF_BASHRC_INSTALLING
    rm -f $TMP_MEM_PATH/.bashrc/*; what_to_do='full';;
  -v)         verbose=true;;
  --do-full)  what_to_do='full';;
  --do-basic) what_to_do='basic';;
  --do-min)   what_to_do='min';;
  --no-rc)    what_to_do='nothing';;
  *)          break;;
  esac
  shift
done
$verbose && echo "wtd=[$what_to_do], args=[$@]" >/dev/stderr
if ${RCSTUFF_BASHRC_INSTALLING:-false}; then
  $verbose && echo "Already being installed [$0, params=($@), tree=(${BASH_SOURCE[*]})]" >/dev/stderr
  eval $(__bashrc_exit '-')
fi
# Really nothing # {{{
if [[ "$what_to_do" == 'nothing' ]]; then
  export PS1='\w $ '
  eval $(__bashrc_exit "PROMPT_COMMAND")
fi # }}}
export RCSTUFF_BASHRC_INSTALLING=true
if [[ ! -z "$PS1" ]] && ! declare -f ___rcstuff_bashrc_markup >/dev/null 2>&1; then
  $verbose && echo "Unsetting RCSTUFF_*" >/dev/stderr
  unset $(echo "${!RCSTUFF_*}" | tr ' ' '\n' | command grep "_INSTALLED$" | xargs)
  ___rcstuff_bashrc_markup() { : ; }
fi
# }}}
# If not running interactively and not forced, don't do anything # {{{
# Set paths # {{{
export BIN_PATH="${BIN_PATH:-$HOME/.bin}"
export BASH_PATH="${BASH_PATH:-$BIN_PATH/bash}"
# }}}
if [[ "$what_to_do" == 'min' ]]; then
  [[ -e $BASH_PATH/runtime ]] && source $BASH_PATH/runtime ''
  [[ -e $BASH_PATH/colors ]] && source $BASH_PATH/colors ''
  eval $(__bashrc_exit)
fi # }}}
# Source basics # {{{
fix_exports() { # {{{
  if type comm >/dev/null 2>&1 && [[ ! -z $__fun_list_orig ]] && ! ${RCSTUFF_FUNCTION_EXPORTED:-false}; then
    local i= whitelist=" $BASHRC_EXPORTS_WHITELIST __git_ps1 "
    while read i; do
      $IS_MAC && continue
      case $i in
      '') continue;;
      _*) [[ "$whitelist" != *\ $i\ * ]] && continue;;
      esac
      export -f $i
    done <<<"$(comm -13 <(echo "$__fun_list_orig" | sort) <(declare -F 2>/dev/null | sort) | awk '!/-fx/ && !/___rcstuff/ {print $3}' | command grep -v "${BASHRC_EXPORTS_BLACK_LIST:-^$}"; echo "$whitelist" | tr ' ' '\n')"
  fi
  export RCSTUFF_FUNCTION_EXPORTED=true
  unset __fun_list_orig
} # }}}
__fun_list_orig="$(declare -F 2>/dev/null)"
[[ -e $BASH_PATH/runtime ]] && source $BASH_PATH/runtime ''
if ${IS_IN_MC:-false}; then
  fix_exports
  eval $(__bashrc_exit)
else
  unset IS_IN_MC
fi
[[ -e $BASH_PATH/colors ]] && source $BASH_PATH/colors ''
[[ -e $BASH_PATH/cfg ]] && source $BASH_PATH/cfg ''
if [[ $what_to_do == 'full' ]]; then
  [[ -e $BASH_PATH/runtime-post ]] && source $BASH_PATH/runtime-post ''
fi
[[ -e $ALIASES ]] && source $BASH_PATH/aliases
[[ -e $BASH_PATH/completion ]] && source $BASH_PATH/completion --do-$what_to_do
[[ "$TERM" == 'cygwin' ]]      && source $BASH_PATH/cygwin ''
# ZFZ # {{{
if $FZF_INSTALLED && ! ${RCSTUFF_FZF_INSTALLED:-false}; then
  if [[ $what_to_do == 'full' ]]; then
    set -o vi
    source $HOME/.fzf.bash ''
    export RCSTUFF_FZF_INSTALLED=true
  else
    source "$SCRIPT_PATH/bash/inits/fzf/shell/completion.bash" 2>/dev/null
  fi
fi # }}}
# }}}
# Remove duplicates from PATH # {{{
export PATH="${PATH//@END@:}"
export PATH="${PATH//::/:}"
export PATH="${PATH//:.:/:}"
export PATH="${PATH%:}"
export PATH="$(printf "%s" "${PATH}" | /usr/bin/awk -v RS=: -v ORS=: '!($0 in a) {a[$0]; print}')"
export PATH
# }}}
# Only in interactive mode # {{{
if [[ "$what_to_do" == 'full' ]]; then
  if [[ ! -z $TMUX_USE_NICE_PRIO ]]; then # {{{
    renice -n 0 $$ >/dev/null 2>&1
    command ps -U $USER -o pid,nice,comm,cmd | command grep -e "^[^\s]\+\s\+$TMUX_USE_NICE_PRIO" | command grep -v "tmux: server" | while read i; do
      pid="${i/ *}"
      $verbose && echo "Renicing process $(echo $i | awk '{print $3, "[", $4, "]"}') [pid=$pid]" >/dev/stderr
      sudo renice -n 0 $pid >/dev/null 2>&1
    done
    unset i
  fi # }}}
  # Do not start extra features if root and BASH_START_EXTRA_FEATURES was not defined explicity # {{{
  if [[ $(id -u) == 0 && ! -n $BASH_START_EXTRA_FEATURES ]]; then
    export BASH_EXTRA_FEATURES='tmux-startup'
    export TMUX_INIT_SESSIONS='ROOT'
    export TMUX_STATUS_RIGHT_EXTRA_SORTED='tmux_info time'
    export TMUX_DEFAULT_SESSION="$TMUX_INIT_SESSIONS"
  fi # }}}
  # Start extra features # {{{
  if ${BASH_START_EXTRA_FEATURES:-true}; then
    [[ -z $BASH_EXTRA_FEATURES ]] && BASH_EXTRA_FEATURES='ssh-agent update-repo tmux-startup knowledge-base-dir messages'
    # Set up ssh-agent # {{{
    if [[ $BASH_EXTRA_FEATURES == *ssh-agent* ]]; then
      if [[ ! -n "$SSH_CLIENT" ]]; then
        source $BIN_PATH/fix_ssh_agent.sh start_if_needed
      else
        source $BIN_PATH/fix_ssh_agent.sh fix_ssh_agent
      fi
      [[ ! -n $TMUX && ! -z $SSH_KEYS ]] && $ALIASES sshh-add ${SSH_KEYS/STOP}
    fi # }}}
    # Update repo # {{{
    if [[ ! -n $TMUX && $BASH_EXTRA_FEATURES == *update-repo* ]]; then
      $BIN_PATH/setup_updater.sh && exec bash
    fi # }}}
    # Messages # {{{
    if [[ $BASH_EXTRA_FEATURES == *messages* && -e "$BASH_PATH/messages.sh" ]]; then
      if [[ ! -n $TMUX ]] && ! pgrep -f messages.sh >/dev/null 2>&1; then
        $BASH_PATH/messages.sh login &
        disown
      fi
      source $BASH_PATH/messages.sh
    fi # }}}
    # Start TMUX # {{{
    if [[ ! -n $TMUX ]]; then
      # Start tmux if not started or not attached # {{{
      if ! $IS_MAC; then
        export TERMNAME="$(command ps -o 'cmd=' -p $(command ps -o 'ppid=' -p $$))"
      else
        export TERMNAME="$(command ps -o 'command=' -p $(command ps -o 'ppid=' -p $$))"
      fi
      if [[ $BASH_EXTRA_FEATURES == *tmux-startup* ]]; then
        if ! tmux ls 2>/dev/null | command grep -q "attached"; then
          unset $(echo "${!RCSTUFF_*}" | tr ' ' '\n' | command grep "_INSTALLED$" | xargs) RCSTUFF_BASHRC_INSTALLING RCSTUFF_FUNCTION_EXPORTED
          $BIN_PATH/tmux-startup.sh --lock --attach
        fi
      fi # }}}
    fi # }}}
    # Knowledge Base dir # {{{
    if [[ $BASH_EXTRA_FEATURES == *knowledge-base-dir* ]]; then
      if [[ -d $TICKET_TOOL_PATH ]]; then # {{{
        source $TICKET_TOOL_PATH/ticket-helper-j
      fi # }}}
    fi
    unset DEFINE_TICKET_TOOL_HELPER
    # }}}
  fi # }}}
  if [[ -n $TMUX ]]; then
    case "$(tmux display-message -p -t $TMUX_PANE -F '#W')" in
    bash | '' | reattach-to-user-namespace) $ALIASES set_title --set-window --unlock-force;;
    esac
  fi
  [[ ! -z $TMP_MEM_PATH/.bashrc/completion-list ]] && complete | grep -v "_minimal" >$TMP_MEM_PATH/.bashrc/completion-list
fi
# }}}

fix_exports
eval $(__bashrc_exit --nr) >/dev/null
true

