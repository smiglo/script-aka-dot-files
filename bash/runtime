#!/bin/bash
# vim: fdl=0

# Check for OS/X # {{{
export IS_MAC=false
[[ $(uname) == 'Darwin' ]] && IS_MAC=true
# }}}
# Check for MC # {{{
export IS_IN_MC=$( [[ "$(ps -o comm= -p $PPID)" == "mc" ]] && echo 'true' || echo 'false')
if $IS_IN_MC; then
  export PROMPT_COMMAND=
  export PS1='\$ '
  export RCSTUFF_RUNTIME_INSTALLED=true
  return
fi # }}}
# Is installed # {{{
${RCSTUFF_RUNTIME_INSTALLED:-false} && [[ $1 != '--force' ]] && return 0
export RCSTUFF_RUNTIME_INSTALLED=true
[[ $1 == '--force' ]] && shift
# }}}
# Clear appended variables {{{
export ALIASES_MAP=
export BASH_EXTRA_FEATURES=
export BASH_UPDATE_REPOS=
export BASH_UPDATE_TIME=
export COMPLETION_GENERIC_UTILS=
export COMPLETION_GENERIC_FUNCTIONS=
export CD_INTERACTIVE_PREDEFINED_LIST=
export CD_INTERACTIVE_USER_LIST=
export CD_LAST_DIRS_INTERACTIVE_IGNORE=
export CD_LAST_DIRS_STORED=
export GIT_LOG_ALL_PARAMS=
export GIT_LOG_PARAMS=
export GIT_PRE_COMMIT_DEBUGS=
export GIT_PRE_COMMIT_IGNORE=
export GIT_PRE_COMMIT_REPO_WHITELIST=
export GIT_PRE_COMMIT_REPO_BLACKLIST=
export GIT_REPOS=
export GREP_EXCLUDES=
export HISTIGNORE=
export HISTIGNORE+=" *"
export HISTIGNORE+=":ls:ll:pwd:pwd *:cd"
export HISTIGNORE+=":fg:bg:jobs:ps"
export HISTIGNORE+=":echo:reset:clear:exit*"
export HISTIGNORE+=":keep-pass.sh*:./keep-pass.sh*"
export HL_DEFAULTS=
export INSTALL_FEATURES=
export KB_PATHS=
export KEEP_PASS_JOURNALS=
export MANPATH=
export PHISTORY_IGNORED_COMMANDS=
export PHISTORY_IGNORED_COMMANDS+="exec"
export PHISTORY_IGNORED_COMMANDS+=":ls:ll:cd"
export PHISTORY_IGNORED_COMMANDS+=":@vi@:@vim@:vim-session"
export PHISTORY_IGNORED_COMMANDS+=":$BIN_PATH/*:$BASH_PATH/*:./bash/aliases\ *:\$BIN_PATH/*:\$BASH_PATH/*"
export PS1_ENV_PWD=
export SCRIPT_PATH=
export SET_TITLE_GETTER_MAP=
export SSH_KEYS=
export TICKET_J_PREDEFINED=
export TICKET_TOOL_POST_ENV=
export TMUX_FINGERS_PREDEFINED=
export TMUX_FINGERS_PREDEFINED+=" ([[:digit:]]{4,})"                                                                                  # Number
export TMUX_FINGERS_PREDEFINED+=" 0x([0-9a-f]+)"                                                                                      # Hex
export TMUX_FINGERS_PREDEFINED+=" ([0-9a-f]{7,40})"                                                                                   # SHA
export TMUX_FINGERS_PREDEFINED+=" ((^|^\.|[[:space:]]|[[:space:]]\.|[[:space:]]\.\.|^\.\.)[[:alnum:]~_-]*/[][[:alnum:]_.#$%&+=/@-]+)" # Path
export TMUX_FINGERS_PREDEFINED+=" ((https?://|git@|git://|ssh://|ftp://|file:///)[[:alnum:]?=%/_.:,;~@!#$&()*+-]*)"                   # URL
export TMUX_FINGERS_REGEX=
export TMUX_INIT_SESSIONS=
export TMUX_REMOTE_PREFIXES=
export TMUX_STATUS_RIGHT_EXTRA=
export TMUX_SWITCH_CLIENT_MAP=
export TO_INSTALL_BIN_MISC='BASIC'
export TO_INSTALL_TOOLS=
export TO_INSTALL_TOOLS_EXTRA=
export VIM_CTRLP_IGNORE_DIRS="NOT_EXISTING_DIR_PATTERN_TO_IGNORE"
export VIM_PRJ_EXCLUDE=
export VIM_PRJ_PARAMS=
# }}}
# Runtime Path - Setup # {{{
export RUNTIME_PATH=$HOME/.runtime
[[ ! -e $RUNTIME_PATH ]] && command mkdir $RUNTIME_PATH
[[ ! -e $RUNTIME_PATH/tmux-buffers ]] && command mkdir $RUNTIME_PATH/tmux-buffers
export CD_LAST_DIRS_STORED+=":rt@$RUNTIME_PATH"
# }}}
# Personalities # {{{
[[ -e $BASH_PATH/personalities/personalities ]] && source $BASH_PATH/personalities/personalities
[[ -e $RUNTIME_PATH/personalities ]] && source $RUNTIME_PATH/personalities
# }}}
# Profiles # {{{
export BASH_PROFILES="$(cd $BASH_PATH/profiles; echo *)"
[[ $BASH_PROFILES == '*' ]] && export BASH_PROFILES=""
# }}}
# Runtime file # {{{
export RUNTIME_FILE=$RUNTIME_PATH/runtime.bash
[[ ! -e $RUNTIME_FILE ]] && touch $RUNTIME_FILE
source $RUNTIME_FILE
for i in $BASH_PROFILES; do
  [[ -e $RUNTIME_FILE.$i ]] && source $RUNTIME_FILE.$i
done
# }}}
# Path # {{{
export PATH=@END@:$PATH
export PATH=$RUNTIME_PATH/bin:$BIN_PATH:$BIN_PATH/vims:$BIN_PATH/misc:$PATH
[[ -e $HOME/.bin-tools/bin ]] && export PATH=$HOME/.bin-tools/bin:$PATH
# }}}
# Tmux - local # {{{
if [[ -e $HOME/.bin/tmux-local-bin ]]; then
  export PATH="$HOME/.bin/tmux-local-bin:$PATH"
  tmux -V 2>&1 | grep -q "no version information available" && export LD_LIBRARY_PATH="$HOME/.config/tmux-local/local/lib:$LD_LIBRARY_PATH"
  [[ -e $HOME/.config/tmux-local/local/share/terminfo ]] && export TERMINFO=$HOME/.config/tmux-local/local/share/terminfo
  [[ -e $HOME/.config/tmux-local/local/share/man/man1/tmux.1 ]] && export MANPATH="$HOME/.config/tmux-local/local/share/man:$MANPATH"
fi # }}}
# MY_PROJ_PATH setup{{{
export MY_PROJ_PATH=$HOME/projects/my
[[ ! -e $MY_PROJ_PATH ]] && export MY_PROJ_PATH=$HOME/projects
if [[ -e $MY_PROJ_PATH ]]; then
  export SCRIPT_PATH=$MY_PROJ_PATH/scripts
  export BASH_UPDATE_REPOS="$MY_PROJ_PATH/scripts $MY_PROJ_PATH/vim"
  export BASH_UPDATE_TIME="$((1*18*60*60))"
  export GIT_REPOS+=" $MY_PROJ_PATH/scripts $MY_PROJ_PATH/info $MY_PROJ_PATH/vim"
  export CD_LAST_DIRS_STORED+=":s@$SCRIPT_PATH"
  [[ -e $MY_PROJ_PATH/vim  ]] && export CD_LAST_DIRS_STORED+=":vim@$MY_PROJ_PATH/vim"
  [[ -e $MY_PROJ_PATH/info ]] && export CD_LAST_DIRS_STORED+=":info@$MY_PROJ_PATH/info"
  [[ -e $MY_PROJ_PATH/.ticket-data.sh ]] && KB_PATHS+=" env:$MY_PROJ_PATH"
  [[ -e $MY_PROJ_PATH/sp/.ticket-data.sh ]] && KB_PATHS+=" sp:$MY_PROJ_PATH/sp"
  if [[ -e $MY_PROJ_PATH/oth/.ticket-data.sh ]]; then # {{{
    if [[ $MY_PROJ_PATH == */my && -e "$HOME/projects/oth" ]]; then
      KB_PATHS+=" oth-my:$MY_PROJ_PATH/oth"
      KB_PATHS+=" oth:$HOME/projects/oth"
    else
      KB_PATHS+=" oth:$MY_PROJ_PATH/oth"
    fi
  elif [[ -e "$HOME/projects/oth" ]]; then
    KB_PATHS+=" oth:$HOME/projects/oth"
  fi # }}}
  if [[ -e $MY_PROJ_PATH/tmp/.ticket-data.sh ]]; then # {{{
    if [[ $MY_PROJ_PATH == */my && -e "$HOME/projects/tmp" ]]; then
      KB_PATHS+=" tmp-my:$MY_PROJ_PATH/tmp"
      KB_PATHS+=" tmp:$HOME/projects/tmp"
    else
      KB_PATHS+=" tmp:$MY_PROJ_PATH/tmp"
    fi
  elif [[ -e "$HOME/projects/tmp" ]]; then
    KB_PATHS+=" tmp:$MY_PROJ_PATH/tmp"
  fi # }}}
else
  echo "Cannot find script path!"
  export MY_PROJ_PATH=
fi
# }}}
# Env - not grouped # {{{
export PS1_SSH_CHANGE=true
export MAKEFILE_COMMON="$SCRIPT_PATH/bash/inits/Makefile"
[[ -e $BIN_PATH/ticket-tool ]] && export TICKET_TOOL_PATH=$BIN_PATH/ticket-tool
export REMINDER_DIR="$RUNTIME_PATH/reminders"
# }}}
# Dropbox setup {{{
export SHARED_BASH_PATH=
export DROPBOX_PATH=$HOME/Documents/Dropbox
[[ ! -e $DROPBOX_PATH ]] && export DROPBOX_PATH=$HOME/Documents/priv/Dropbox
[[ ! -e $DROPBOX_PATH ]] && export DROPBOX_PATH=
if [[ ! -z $DROPBOX_PATH ]]; then
  export CD_LAST_DIRS_STORED+=":Dr@$DROPBOX_PATH"
  export SHARED_BASH_PATH=$DROPBOX_PATH/rozne/bash-utils
  [[ -e $SHARED_BASH_PATH/runtime.bash ]] && source $SHARED_BASH_PATH/runtime.bash
fi
# }}}
# TMP setup {{{
export TMP_PATH=$HOME/.tmp
export TMP_MEM_PATH=$TMP_PATH/.mem
export TMPDIR=$TMP_PATH/tmp-dir
[[ ! -e $TMPDIR ]] && command mkdir -p $TMPDIR
[[ ! -d $TMP_MEM_PATH ]] && echo "Memory fs does not exist [$TMP_MEM_PATH]. It will be created" && command mkdir -p $TMP_MEM_PATH && chmod 700 $TMP_MEM_PATH
export CD_LAST_DIRS_STORED+=":T@$TMP_PATH"
export CD_LAST_DIRS_STORED+=":Tm@$TMP_MEM_PATH"
# TMP Subentries {{{
export TMUX_TMPDIR=$TMP_MEM_PATH/.tmux
[[ ! -d $TMUX_TMPDIR ]] && command mkdir -p $TMUX_TMPDIR && chmod 700 $TMUX_TMPDIR
export GREP_LAST_PATH=$TMP_PATH/.grep-last
export VIM_UTILS_PATH="$TMP_PATH/.vim"
export VIM_SESSIONS_PATH=$VIM_UTILS_PATH/sessions
if [[ -n $TMUX ]]; then
  export TMUX_SESSION="$(tmux display-message -p -t $TMUX_PANE -F '#S')"
  export TMUX_SESSION_PATH="$TMP_PATH/.tmux-sessions/$TMUX_SESSION"
  [[ ! -e $TMUX_SESSION_PATH ]] && command mkdir -p $TMUX_SESSION_PATH
  export GREP_LAST_PATH="$TMUX_SESSION_PATH/grep-last"
  export VIM_UTILS_PATH="$TMUX_SESSION_PATH/vim"
  export VIM_SESSIONS_PATH="$TMUX_SESSION_PATH/vim/sessions"
  export TMUX_RUNTIME="$TMUX_SESSION_PATH/runtime"
fi
export VIM_UNDOES_PATH="$VIM_UTILS_PATH/undoes"
[[ ! -e $GREP_LAST_PATH ]] && command mkdir -p $GREP_LAST_PATH
[[ ! -e $VIM_UTILS_PATH ]] && command mkdir -p $VIM_UTILS_PATH
[[ ! -e $VIM_UNDOES_PATH ]] && command mkdir -p $VIM_UNDOES_PATH
[[ ! -e $VIM_SESSIONS_PATH ]] && command mkdir -p $VIM_SESSIONS_PATH
if [[ ! -z $TMUX_RUNTIME ]]; then # {{{
  [[ ! -e $TMP_MEM_PATH/tmux-runtime/$TMUX_SESSION ]] && command mkdir -p $TMP_MEM_PATH/tmux-runtime/$TMUX_SESSION
  [[ ! -e $TMUX_RUNTIME ]] && ln -sf $TMP_MEM_PATH/tmux-runtime/$TMUX_SESSION $TMUX_RUNTIME
else
  export TMUX_RUNTIME="$TMP_MEM_PATH/runtime"
  [[ ! -e $TMUX_RUNTIME ]] && command mkdir -p $TMUX_RUNTIME
fi # }}}
# }}}
# Clean TMP # {{{
if [[ $(id -u) != 0 ]]; then # {{{
  now=$(command date +"%s")
  check_file=$TMP_MEM_PATH/.tmp-last-check
  do_clean=false
  if [[ -z $TMP_PATH_LAST_CHECK && ! -e $check_file ]]; then # {{{
    sleep .$((1+($RANDOM%5)))
    [[ ! -e $check_file ]] && echo "$now" >$check_file && do_clean=true
  fi # }}}
  [[ ${TMP_PATH_LAST_CHECK:-0} -lt $(($now - 1 * 18 * 60 * 60)) ]] && export TMP_PATH_LAST_CHECK=$(cat $check_file)
  if [[ $TMP_PATH_LAST_CHECK -lt $(($now - 1 * 18 * 60 * 60)) ]] || $do_clean; then # {{{
    export TMP_PATH_LAST_CHECK=$now
    echo $TMP_PATH_LAST_CHECK >$check_file
    (
      # Vars # {{{
      [[ -z $COff ]] && source $BASH_PATH/colors
      paths=""
      paths+=" p=\"$TMP_MEM_PATH\";threshold=7;size=50"
      paths+=" p=\"$TMPDIR\";threshold=1;silent=true;size=250"
      paths+=" p=\"${RMF_TRASH_PATH:-$TMP_PATH/.trash}\";threshold=7;silent=true;size=200"
      paths+=" p=\"$TMP_PATH\";size=150"
      paths+=" p=\"$TMP_PATH/.grep-last\";silent=true;size=15"
      paths+=" p=\"$TMP_PATH/.vim/undoes\";silent=true;size=20"
      paths+=" p=\"$TMP_PATH/.vim/sessions\";silent=true;threshold=42"
      for p in $TMP_PATH/.tmux-sessions/*; do # {{{
        [[ $p == */ROOT ]] && continue
        paths+=" p=\"$p/grep-last\";size=15"
        paths+=" p=\"$p/vim/undoes\";size=20"
        paths+=" p=\"$p/vim/sessions\";threshold=42;"
      done # }}}
      marker="$TMP_MEM_PATH/.marker.$$"
      # }}}
      for p in $paths; do # {{{
        threshold=21 size= silent=false
        eval "$p"
        touch -t "$(command date +"%Y%m%d%H%M.%S" -d "$threshold days ago")" $marker
        msg="${CBlue}Cleaning tmp"
        [[ $p == $TMP_MEM_PATH ]] && msg+="-mem"
        msg+=" [${p/$TMP_PATH\/}]"
        $BASH_PATH/aliases progress --mark --dots --msg "$msg" --color ${CCyan} --delay 0.1
        # Old files # {{{
        find $p \
          -mindepth 1 -path $p/'.*' -prune -o -not -newer $marker -a -type f \
          -exec \
            /bin/bash -c 'f() { ! '$silent' && echo -en "\nRemoving ['${CCyan}'${1/$2\/}'${COff}']"; rm -f "$1"; }; f "{}" '\"$p\"';' \; \
          2>/dev/null # }}}
        # Dead links # {{{
        find $p \
          -mindepth 1 -path $p/'.*' -prune -o -type l \
          -exec \
            /bin/bash -c 'f() { if [[ ! -e "$1" ]]; then ! '$silent' && echo -en "\nRemoving deadlink ['${CCyan}'${1/$2\/}'${COff}']"; rm -f "$1"; fi; }; f "{}" '"$p"';' \; \
          2>/dev/null # }}}
        # Empty Dirs # {{{
        find $p \
          -mindepth 1 -not -path $p/'.*' -a -type d -a -not -newer $marker -a -empty \
          -exec \
            /bin/bash -c 'f() { ! '$silent' && echo -en "\nRemoving empty dir ['${CCyan}'${1/$2\/}'${COff}']"; }; f "{}" '\"$p\"';' \; \
          -delete \
          2>/dev/null # }}}
        rm -f $marker
        [[ ! -z $size && $(command du -s $p 2>/dev/null | awk '{print int($1/1014)}') -gt $size ]] && echo -en "\nSize greater than [${CCyan}${size}${COff}]"
        $BASH_PATH/aliases progress --unmark
      done # }}}
    )
  fi # }}}
  unset check_file now do_clean
fi # }}}
find /tmp -user $USER -name sh-thd\* 2>/dev/null -exec rm {} \;
# }}}
# }}}
# GIT path setup {{{
GIT_PATH="/usr/local/git/current"
[[ -e $GIT_PATH ]] && export GIT_PATH && export PATH="$GIT_PATH/bin:$PATH" || unset GIT_PATH
# }}}
# PATH {{{
[[ -e $HOME/.cargo/bin ]] && export PATH="$HOME/.cargo/bin:$PATH"
# }}}
# Source profiles' runtimes {{{
for i in $BASH_PROFILES; do
  [[ -e $BASH_PATH/profiles/$i/runtime ]] && source $BASH_PATH/profiles/$i/runtime
done
# }}}

