#!/usr/bin/env bash
# vim: fdl=0

# Workaround for older bash # {{{
epochSeconds() { # {{{
  command date +%s
}
export -f epochSeconds # }}}
# }}}
# Check for OS/X # {{{
export IS_MAC=false
[[ $(uname) == 'Darwin' ]] && IS_MAC=true && export UNAME="$(uname)" && export USERLAND="GNU"
# }}}
# Check for MC # {{{
export IS_IN_MC=$( [[ "$(ps -o comm= -p $PPID)" == "mc" ]] && echo 'true' || echo 'false')
if $IS_IN_MC; then
  export PROMPT_COMMAND=
  export PS1='\$ '
  export RCSTUFF_RUNTIME_INSTALLED=true
  return
fi # }}}
# Is installed # {{{
${RCSTUFF_RUNTIME_INSTALLED:-false} && [[ $1 != '--force' ]] && return 0
export RCSTUFF_RUNTIME_INSTALLED=true
[[ $1 == '--force' ]] && shift
# }}}
# Unicode extra chars # {{{
declare -A UNICODE_EXTRA_CHARS
UNICODE_EXTRA_CHARS[battery]="🔋"
UNICODE_EXTRA_CHARS[disk]="💾"
UNICODE_EXTRA_CHARS[nested_bash]="❶"
UNICODE_EXTRA_CHARS[envelope]="✉ "
UNICODE_EXTRA_CHARS[exclamation]="❢"
UNICODE_EXTRA_CHARS[extra_bar]="◼ "
UNICODE_EXTRA_CHARS[high_cpu]="⚛ "
UNICODE_EXTRA_CHARS[link]="🔗"
UNICODE_EXTRA_CHARS[localhost]="🤠"
UNICODE_EXTRA_CHARS[log_last_pause]="⏸ "
UNICODE_EXTRA_CHARS[log_last_play]="⏺ "
UNICODE_EXTRA_CHARS[mic]="🎤"
UNICODE_EXTRA_CHARS[mute]="🔇"
UNICODE_EXTRA_CHARS[padlock]="🔓"
UNICODE_EXTRA_CHARS[power]="🔌"
UNICODE_EXTRA_CHARS[progress_bar]="▁▃▄▅▆▇█▇▆▅▄▃"
UNICODE_EXTRA_CHARS[progress_dots]="⠁⠂⠃⠄⠅⠆⠇⠈⠉⠊⠋⠌⠍⠎⠏⠐⠑⠒⠓⠔⠕⠖⠗⠘⠙⠚⠛⠜⠝⠞⠟⠠⠡⠢⠣⠤⠥⠦⠧⠨⠩⠪⠫⠬⠭⠮⠯⠰⠱⠲⠳⠴⠵⠶⠷⠸⠹⠺⠻⠼⠽⠾⠿⡀⡁⡂⡃⡄⡅⡆⡇⡈⡉⡊⡋⡌⡍⡎⡏⡐⡑⡒⡓⡔⡕⡖⡗⡘⡙⡚⡛⡜⡝⡞⡟⡠⡡⡢⡣⡤⡥⡦⡧⡨⡩⡪⡫⡬⡭⡮⡯⡰⡱⡲⡳⡴⡵⡶⡷⡸⡹⡺⡻⡼⡽⡾⡿⢀⢁⢂⢃⢄⢅⢆⢇⢈⢉⢊⢋⢌⢍⢎⢏⢐⢑⢒⢓⢔⢕⢖⢗⢘⢙⢚⢛⢜⢝⢞⢟⢠⢡⢢⢣⢤⢥⢦⢧⢨⢩⢪⢫⢬⢭⢮⢯⢰⢱⢲⢳⢴⢵⢶⢷⢸⢹⢺⢻⢼⢽⢾⢿⣀⣁⣂⣃⣄⣅⣆⣇⣈⣉⣊⣋⣌⣍⣎⣏⣐⣑⣒⣓⣔⣕⣖⣗⣘⣙⣚⣛⣜⣝⣞⣟⣠⣡⣢⣣⣤⣥⣦⣧⣨⣩⣪⣫⣬⣭⣮⣯⣰⣱⣲⣳⣴⣵⣶⣷⣸⣹⣺⣻⣼⣽⣾⣿"
UNICODE_EXTRA_CHARS[root]="☢ "
UNICODE_EXTRA_CHARS[smart]="ⓢ "
UNICODE_EXTRA_CHARS[ssh]="🚀"
UNICODE_EXTRA_CHARS[zoom_left]="🔍"
UNICODE_EXTRA_CHARS[zoom_right]="🔎"
UNICODE_EXTRA_CHARS[zoom]="${UNICODE_EXTRA_CHARS[zoom_right]}"
TERMINAL_HAS_SUPPORT_FOR_2W_CHARS=true
if $IS_MAC; then
  :
else
  [[ "$(echo -en "🔍" | { $IS_MAC && gwc -L || wc -L; })" != "2" ]] && TERMINAL_HAS_SUPPORT_FOR_2W_CHARS=false
fi
if ! $TERMINAL_HAS_SUPPORT_FOR_2W_CHARS; then
  UNICODE_EXTRA_CHARS[battery]="B"
  UNICODE_EXTRA_CHARS[disk]="U"
  UNICODE_EXTRA_CHARS[localhost]=":)"
  UNICODE_EXTRA_CHARS[mic]="Mic"
  UNICODE_EXTRA_CHARS[mute]="Mute"
  UNICODE_EXTRA_CHARS[power]="P"
  UNICODE_EXTRA_CHARS[zoom]="/Z"
fi
export UNICODE_EXTRA_CHARS
export UNICODE_EXTRA_CHARS_FILE="$TMP_MEM_PATH/.unicode-extra.conf"
# }}}
# Personalities # {{{
[[ -e $BASH_PATH/personalities/personalities ]] && source $BASH_PATH/personalities/personalities
[[ -e $RUNTIME_PATH/personalities ]] && source $RUNTIME_PATH/personalities
# }}}
# Path # {{{
export PATH=@END@:$PATH
if $IS_MAC && [[ -e /usr/local/opt/coreutils/libexec/gnubin/ ]]; then
  PATH=/usr/local/opt/coreutils/libexec/gnubin/:$PATH
fi
export PATH=$RUNTIME_PATH/bin:$BIN_PATH:$BIN_PATH/vims:$BIN_PATH/misc:$PATH
[[ -e $HOME/.bin-tools/bin ]] && export PATH=$HOME/.bin-tools/bin:$PATH
# }}}
# Tmux - local # {{{
if [[ ! -e $HOME/.bin/tmux-local-bin && -e $HOME/.config/tmux-local/.use-local && -e $HOME/.config/tmux-local/local/bin/tmux ]]; then
  ln -sf $HOME/.config/tmux-local/local/bin $HOME/.bin/tmux-local-bin
fi
if [[ -e $HOME/.bin/tmux-local-bin ]]; then
  export PATH="$HOME/.bin/tmux-local-bin:$PATH"
  tmux -V 2>&1 | grep -q "no version information available" && export LD_LIBRARY_PATH="$HOME/.config/tmux-local/local/lib:$LD_LIBRARY_PATH"
  [[ -e $HOME/.config/tmux-local/local/share/terminfo ]] && export TERMINFO=$HOME/.config/tmux-local/local/share/terminfo
  [[ -e $HOME/.config/tmux-local/local/share/man/man1/tmux.1 ]] && export MANPATH="$HOME/.config/tmux-local/local/share/man:$MANPATH"
fi # }}}
# Env - not grouped # {{{
export PS1_SSH_CHANGE=true
export MAKEFILE_COMMON="$SCRIPT_PATH/bash/inits/Makefile"
[[ -e $BIN_PATH/ticket-tool ]] && export TICKET_TOOL_PATH=$BIN_PATH/ticket-tool
export REMINDER_DIR="$APPS_CFG_PATH/reminders"
export ALIASES="$BASH_PATH/aliases"
export _RR_TRACE_DIR="./.rr"
[[ -e "$SCRIPT_PATH/bin/oth/tmux-sb-worker.sh" ]] && export TMUX_SB_WORKER="$SCRIPT_PATH/bin/oth/tmux-sb-worker.sh"
export TMUX_SB_INTERVAL=15
# }}}
# Sharable setup {{{
if [[ -z $SHARABLE_PATH ]]; then # {{{
  sPaths="$HOME/Documents/misc $HOME/Documents/priv/misc $TMP_MEM_PATH/share"
  for SHARABLE_PATH in $sPaths; do
    [[ -e $SHARABLE_PATH ]] && break
  done
  # echo "Sharable not found" >/dev/stderr
  # [[ ! -e $SHARABLE_PATH ]] && command mkdir -p $SHARABLE_PATH
  unset sPaths
fi # }}}
[[ -e $TMP_MEM_PATH/.net.no && $(stat -c %Y $TMP_MEM_PATH/.net.no) -lt $((${EPOCHSECONDS:-$(epochSeconds)} - 30*60)) ]] && rm -f $TMP_MEM_PATH/.net.no
if [[ ! -e $TMP_MEM_PATH/.net.no ]] && ! ping -c1 -w1 8.8.8.8 >/dev/null 2>&1; then
  touch $TMP_MEM_PATH/.net.no
fi
if ( [[ ! -n $TMUX  && ! -e $TMP_MEM_PATH/.net.no && -e $SHARABLE_PATH ]] ) || ( [[ $1 == '--mnt-sharable' ]] ); then # {{{
  [[ $1 == '--mnt-sharable' ]] && shift && rm -f $TMP_MEM_PATH/.sharable.conf $TMP_MEM_PATH/.sharable-runtime.bash
  [[ -e $TMP_MEM_PATH/.sharable.conf ]] && source $TMP_MEM_PATH/.sharable.conf
  export CD_LAST_DIRS_STORED+=":shr@$SHARABLE_PATH"
  if ${USE_FUSE:-true} && ! $IS_MAC && [[ ! -e $TMP_MEM_PATH/.sharable.conf ]]; then # {{{
    if ${USE_FUSE_DIRECTLY:-false}; then
      [[ -e $SHARABLE_PATH/.mounted ]] || google-drive-ocamlfuse -label $USE_FUSE_LABEL $SHARABLE_PATH
    elif [[ -e $HOME/.config/systemd/user/sharable-gd.service ]]; then
      [[ -e $SHARABLE_PATH/.mounted ]] || command systemctl --user start sharable-gd
    fi
    if [[ -e $SHARABLE_PATH/.mounted ]]; then
      touch $TMP_MEM_PATH/.sharable.conf
    else
      echo "Sharable [$SHARABLE_PATH] not mounted" >/dev/stderr
    fi
    if [[ -e $HOME/.config/systemd/user/sharable-gd-tb.service ]]; then
      mntDir="$(cat $HOME/.config/systemd/user/sharable-gd-tb.service | awk '/ExecStart=google-drive-ocamlfuse/{print $4}')"
      if [[ -d $mntDir ]]; then
        [[ -e $mntDir/.mounted ]] || command systemctl --user start sharable-gd-tb
      fi
    fi
  fi # }}}
  if [[ ! -e $TMP_MEM_PATH/.sharable-runtime.bash ]]; then # {{{
    touch $TMP_MEM_PATH/.sharable-runtime.bash
    if [[ -d $SHARABLE_PATH/sharable/bash-utils ]]; then
      export SHARED_BASH_PATH=$SHARABLE_PATH/sharable/bash-utils
      echo "SHARED_BASH_PATH=$SHARED_BASH_PATH" >>$TMP_MEM_PATH/.sharable.conf
    fi
    if [[ ! -z $SHARED_BASH_PATH ]]; then
      if [[ -e $SHARED_BASH_PATH/runtime.bash ]]; then
        cp $SHARED_BASH_PATH/runtime.bash $TMP_MEM_PATH/.sharable-runtime.bash
      fi
    fi
  fi # }}}
  source $TMP_MEM_PATH/.sharable-runtime.bash
else
  [[ -e $TMP_MEM_PATH/.sharable.conf ]] && source $TMP_MEM_PATH/.sharable.conf
fi # }}}
export SHARABLE_PATH SHARED_BASH_PATH
# }}}
# TMP setup {{{
export CD_LAST_DIRS_STORED+=":T@$TMP_PATH"
export CD_LAST_DIRS_STORED+=":Tm@$TMP_MEM_PATH"
[[ -e $HOME/Desktop/mem ]] && export CD_LAST_DIRS_STORED+=":m@$HOME/Desktop/mem"
# TMP Subentries {{{
export TMUX_TMPDIR=$TMP_MEM_PATH/.tmux
[[ ! -d $TMUX_TMPDIR ]] && command mkdir -p $TMUX_TMPDIR && chmod 700 $TMUX_TMPDIR
export UTILS_PATH=$TMP_PATH
export GREP_LAST_PATH=$UTILS_PATH/.grep-last
export VIM_UTILS_PATH="$UTILS_PATH/.vim"
if [[ -n $TMUX ]]; then
  export TMUX_SESSION="$(tmux display-message -p -t $TMUX_PANE -F '#S')"
  export TMUX_SESSION_PATH="$APPS_CFG_PATH/tmux/sessions/$TMUX_SESSION"
  [[ ! -e $TMUX_SESSION_PATH ]] && command mkdir -p $TMUX_SESSION_PATH
  export UTILS_PATH=$TMUX_SESSION_PATH
  export GREP_LAST_PATH="$UTILS_PATH/grep-last"
  export VIM_UTILS_PATH="$UTILS_PATH/vim"
  export TMUX_RUNTIME="$UTILS_PATH/runtime"
  [[ ! -e $TMP_MEM_PATH/tmux-runtime/$TMUX_SESSION ]] && command mkdir -p $TMP_MEM_PATH/tmux-runtime/$TMUX_SESSION
  [[ ! -e $TMUX_RUNTIME ]] && ln -sf $TMP_MEM_PATH/tmux-runtime/$TMUX_SESSION $TMUX_RUNTIME
else
  export TMUX_RUNTIME="$TMP_MEM_PATH/runtime"
  [[ ! -e $TMUX_RUNTIME ]] && command mkdir -p $TMUX_RUNTIME
fi
export VIM_SESSIONS_PATH=$VIM_UTILS_PATH/sessions
export VIM_UNDOES_PATH="$VIM_UTILS_PATH/undoes"
[[ ! -e $GREP_LAST_PATH ]] && command mkdir -p $GREP_LAST_PATH
[[ ! -e $VIM_UTILS_PATH ]] && command mkdir -p $VIM_UTILS_PATH
[[ ! -e $VIM_UNDOES_PATH ]] && command mkdir -p $VIM_UNDOES_PATH
[[ ! -e $VIM_SESSIONS_PATH ]] && command mkdir -p $VIM_SESSIONS_PATH
# }}}
# Clean TMP # {{{
if [[ $UID != 0 && $what_to_do != 'min' && ( ! -z $PS1 || $1 == '--clean-tmp'* ) ]]; then # {{{
  now=${EPOCHSECONDS:-$(epochSeconds)}
  check_file=$TMP_MEM_PATH/.tmp-last-check
  do_clean=false
  case $1 in # {{{
  --clean-tmp)            do_clean=true; shift;;
  --clean-tmp-silent)     do_clean='silent'; shift;;
  --clean-tmp-no-silent)  do_clean='no-silent'; shift;;
  esac # }}}
  if [[ ! -e $check_file ]]; then
    echo "$now" >$check_file
    if [[ $do_clean != *'silent' ]]; then
      [[ -n $TMUX ]] && do_clean='silent' || do_clean='no-silent'
    fi
  fi
  [[ ${TMP_PATH_LAST_CHECK:-0} -lt $(($now - 1 * 18 * 60 * 60)) ]] && export TMP_PATH_LAST_CHECK=$(cat $check_file)
  if [[ $TMP_PATH_LAST_CHECK -lt $(($now - 1 * 18 * 60 * 60)) || $do_clean != 'false' ]]; then # {{{
    if [[ $do_clean == 'true' ]]; then
      [[ -n $TMUX ]] && do_clean='silent' || do_clean='no-silent'
    fi
    export TMP_PATH_LAST_CHECK=$now
    echo $TMP_PATH_LAST_CHECK >$check_file
    (
      # Vars # {{{
      [[ -z $COff ]] && source $BASH_PATH/colors
      paths=""
      paths+=" p=\"$TMP_MEM_PATH\";threshold=7;size=50"
      paths+=" p=\"$TMPDIR\";threshold=21;silent=true;size=250"
      paths+=" p=\"${RMF_TRASH_PATH:-$TMP_PATH/.trash}\";threshold=7;silent=true;size=200"
      paths+=" p=\"$TMP_PATH\";size=150"
      paths+=" p=\"$APPS_CFG_PATH/tmux/buffers\";silent=true"
      paths+=" p=\"$APPS_CFG_PATH/tmux/layouts\";silent=true;keep=\"^\\(.*/\\)\\?l\\(\\..*\\)\?\\.layout\""
      paths+=" p=\"$TMP_PATH/.grep-last\";silent=true;size=15"
      paths+=" p=\"$TMP_PATH/.vim/undoes\";silent=true;size=20"
      paths+=" p=\"$TMP_PATH/.vim/sessions\";silent=true;threshold=42"
      for p in $APPS_CFG_PATH/tmux/sessions/*; do # {{{
        [[ $p == */ROOT ]] && continue
        paths+=" p=\"$p/grep-last\";size=15"
        paths+=" p=\"$p/vim/undoes\";size=20"
        paths+=" p=\"$p/vim/sessions\";threshold=42;"
      done # }}}
      marker="$TMP_MEM_PATH/.marker.$$"
      # }}}
      for p in $paths; do # {{{
        threshold=21 size= silent=true keep='-----'
        eval "$p"
        case $do_clean in # {{{
        silent)    silent=true;;
        no-silent) silent=false;;
        esac # }}}
        export keep
        touch -t "$(command date +"%Y%m%d%H%M.%S" -d "$threshold days ago")" $marker
        msg="${CBlue}Cleaning tmp"
        [[ $p == $TMP_MEM_PATH ]] && msg+="-mem"
        msg+=" [${p/$TMP_PATH\/}]"
        msg+="${COff}"
        $silent \
          && echo -e "$msg" >/dev/stderr \
          || $ALIASES progress --mark --dots --msg "$msg" --color ${CCyan} --delay 0.1 --out /dev/stderr
        # Old files # {{{
        find $p \
          -mindepth 1 -path $p/'.*' -prune -o -not -newer $marker -a -type f \
          -exec \
            $SHELL -c 'f() { [[ ! -z "'$keep'" ]] && echo "${1/$2\/}" | command grep -qe "'$keep'" && return 0; ! '$silent' && echo -en "\nRemoving ['${CCyan}'${1/$2\/}'${COff}']" >/dev/stderr; rm -f "$1"; }; f "{}" '\"$p\"';' \; \
          2>/dev/null # }}}
        # Dead links # {{{
        find $p \
          -mindepth 1 -path $p/'.*' -prune -o -type l \
          -exec \
            $SHELL -c 'f() { if [[ ! -e "$1" ]]; then ! '$silent' && echo -en "\nRemoving deadlink ['${CCyan}'${1/$2\/}'${COff}']" >/dev/stderr; rm -f "$1"; fi; }; f "{}" '"$p"';' \; \
          2>/dev/null # }}}
        # Empty Dirs # {{{
        find $p \
          -mindepth 1 -not -path $p/'.*' -a -type d -a -not -newer $marker -a -empty \
          -exec \
            $SHELL -c 'f() { ! '$silent' && echo -en "\nRemoving empty dir ['${CCyan}'${1/$2\/}'${COff}']" >/dev/stderr; rm -rf "$1"; }; f "{}" '\"$p\"';' \; \
          2>/dev/null # }}}
        rm -f $marker
        [[ ! -z $size && $(command du -s $p 2>/dev/null | awk '{print int($1/1014)}') -gt $size ]] && ! $silent && echo -en "\nSize greater than [${CCyan}${size}${COff}]" >/dev/stderr
        $silent || $ALIASES progress --unmark
      done # }}}
      if which tac >/dev/null 2>&1 && [[ ! -n $TMUX || $do_clean != 'false' ]]; then
        msg="${CBlue}Cleaning bash histories${COff}"
        $silent \
          && echo -e "$msg" >/dev/stderr \
          || $ALIASES progress --mark --dots --msg "$msg" --color ${CCyan} --delay 0.1 --out /dev/stderr
        find -L $TMP_PATH/.tmux -maxdepth 3 -name bash_history \
          -exec \
            $SHELL -c 'f() { \
              sed -i -e "/^#/d" -e "s/\s\+$//" "$1" \
              && tac "$1" | awk '"'"'!seen[$0] {print} {++seen[$0]}'"'"' | tac >"$1.bck" \
              && mv "$1.bck" "$1"; \
            }; f "{}"' \; \
          2>/dev/null
        $silent || $ALIASES progress --unmark
      fi
    )
  fi # }}}
  unset check_file now do_clean
fi # }}}
find /tmp -user $USER -name sh-thd\* 2>/dev/null -exec rm {} \;
# }}}
# }}}
# GIT path setup {{{
GIT_PATH="/usr/local/git/current"
[[ -e $GIT_PATH ]] && export GIT_PATH && export PATH="$GIT_PATH/bin:$PATH" || unset GIT_PATH
# }}}
# PATH {{{
[[ -e $HOME/.cargo/bin ]] && export PATH="$HOME/.cargo/bin:$PATH"
[[ -e $HOME/.local/bin ]] && export PATH="$HOME/.local/bin:$PATH"
# }}}
# Runtime file # {{{
export RUNTIME_FILE=$RUNTIME_PATH/runtime.bash
[[ ! -e $RUNTIME_FILE ]] && touch $RUNTIME_FILE
source $RUNTIME_FILE
for i in $BASH_PROFILES; do
  [[ -e $RUNTIME_FILE.$i ]] && source $RUNTIME_FILE.$i
done
# }}}
# Source profiles' runtimes {{{
for i in $BASH_PROFILES_FULL; do
  [[ -e $i/runtime ]] && source $i/runtime
done
true
# }}}

