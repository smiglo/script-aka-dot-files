#!/usr/bin/env bash
# vim: fdl=0

# Is installed # {{{
${RCSTUFF_COMPLETION_INSTALLED:-false} && [[ $1 != '--force' ]] && return 0
export RCSTUFF_COMPLETION_INSTALLED=true
[[ $1 == '--force' ]] && shift
if [[ -e $TMP_MEM_PATH/.bashrc/completion-list ]]; then
  source $TMP_MEM_PATH/.bashrc/completion-list
  [[ $1 != '--do-full' ]] && return 0
fi
[[ $1 == '--do-'* ]] && shift
# }}}
_completion_generic() { # {{{
  local cur= prev= opts= cmd= _alias= param= i=
  cur=${COMP_WORDS[COMP_CWORD]}
  _get_comp_words_by_ref -n : cur
  prev=${COMP_WORDS[COMP_CWORD-1]}
  cmd=${COMP_WORDS[0]}
  param="@@"
  if [[ $cmd == 'git' ]]; then
    cmd="git-cmds.sh"
    param+="${COMP_WORDS[1]}"
  else
    _alias=$(alias | command grep "alias $cmd=")
    if [[ $? == 0 ]]; then
      _alias=$(echo $_alias | sed "s/alias $cmd=//")
      cmd=${_alias//\'} #' //Vim formatting fixing}
      cmd=${cmd/*;}
      cmd=${cmd/ *}
    fi
  fi
  # echo "c=[$cmd $param]" >/dev/stderr
  opts=$($cmd $param $COMP_CWORD $prev ${COMP_WORDS[@]:1:$((${#COMP_WORDS[@]}-2))})
  set -- $opts
  opts=''
  while [[ ! -z $1 ]]; do # {{{
    case $1 in
    @@*) case ${1:2} in # {{{
         -f) while read i; do # {{{
               opts+=" ${i// /\\ }"
               [[ -d $i ]] && opts+='/'
             done < <(compgen -f -- "$cur");; # }}}
         -d) while read i; do # {{{
               opts+=" ${i// /\\ }/"
             done < <(compgen -d -- "$cur");; # }}}
         *)  while read i; do # {{{
               opts+=" ${i// /\\ }"
             done < <(compgen ${1:2} -- "$cur");; # }}}
         esac;; # }}}
    ---) opts="---"; break;;
    *) opts+=" ${1//@SP@/\\ }";;
    esac
    shift
  done # }}}
  COMPREPLY=()
  if [[ "$opts" != '---' ]]; then
    i=0
    while read opts; do # {{{
      COMPREPLY[$i]="${opts// /\\ }"
      i=$(($i+1))
    done < <(compgen -W "$opts" -- "$cur") # }}}
  else
    COMPREPLY[0]=""
  fi
  __ltrim_colon_completions "$cur"
}
export -f _completion_generic
# }}}
_completion_git_cmds() { # {{{
  local cur opts
  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  opts=

  if [ "$COMP_CWORD" == '1' ]; then
    opts="backup remote-rm rbb"
  else
    local dir=$PWD
    while [ ! -d "$dir/.git" ]; do
      [ "$dir" == '/' ] && break
      dir=$(cd $dir/.. && pwd)
    done

    case "${COMP_WORDS[1]}" in
    "backup") ;;
    "remote-rm") [ -d $dir/.git/refs/heads ] && opts=$(ls $dir/.git/refs/heads);;
    "rbb") [ -d $dir/.git/refs/heads ] && opts=$(ls $dir/.git/refs/heads);;
    esac
  fi
  COMPREPLY=( $(compgen -W "$opts" -- $cur) )
}
export -f _completion_git_cmds
# }}}
_completion_vim() { # {{{
  COMPREPLY=()
  local cmd=${COMP_WORDS[0]}
  [[ "$(which $cmd)" != $BIN_PATH/vims/* ]] && return
  _completion_generic
}
export -f _completion_vim
# }}}
_do_vim_completion() { # {{{
  local i
  for i in {,_}{,g,m,r}{vi,view,vim,vimdiff}; do
    complete $COMPLETE_DEFAULT_PARAMS -F _completion_vim $i
  done
 complete $COMPLETE_DEFAULT_PARAMS -F _completion_vim vim-session
}
# }}}
recomplete() { # {{{
  complete | command grep -q "$1" && complete -r "$1" 2>/dev/null
  complete $COMPLETE_DEFAULT_PARAMS -F _completion_generic "$1"
}  # }}}
# Brew & Mac-Ports # {{{
if $IS_MAC; then
  if type brew 1>/dev/null 2>&1; then
    for cf in /usr/local/etc/bash_completion.d/*; do
      [[ -e $cf ]] && source "$cf"
    done
    unset cf
  fi
fi # }}}
# Completion for git aliases defined in git-cmds.sh {{{
_git_sync()     { _completion_generic; }
_git_backup()   { _completion_generic; }
_git_gitst()    { _completion_generic; }
_git_ch_pick()  { _completion_generic; }
_git_userset()  { _completion_generic; }
# }}}
# Set generic completion {{{
COMPLETION_GENERIC_UTILS+=" fix_ssh_agent.sh mk_tar.sh asciidoc2html.sh gitst do_sync.sh tmux-startup.sh"
for i in $COMPLETION_GENERIC_UTILS $TO_INSTALL_BIN_MISC; do
  type $i >/dev/null 2>&1 && complete $COMPLETE_DEFAULT_PARAMS -F _completion_generic $i # || echo "Util [$i] not found" >/dev/stderr
done
unset COMPLETION_GENERIC_UTILS
for i in $(echo "$COMPLETION_GENERIC_FUNCTIONS" | tr ' ' '\n' | sort -u | tr '\n' ' '); do
  if type $i >/dev/null 2>&1; then
    complete -r $i >/dev/null 2>&1
    complete $COMPLETE_DEFAULT_PARAMS -F _completion_generic $i
  else
    echo "Function [$i] not found" >/dev/stderr
  fi
done
unset COMPLETION_GENERIC_FUNCTIONS
# }}}
# Git-cmds # {{{
complete $COMPLETE_DEFAULT_PARAMS -F _completion_git_cmds git_cmds.sh
# }}}
# Hosts # {{{
if [[ -e $HOME/.ssh/known_hosts ]] && tail -1 $HOME/.ssh/known_hosts | command grep -vq "^|1|"; then
  complete -W "$( echo `cat ~/.ssh/known_hosts | cut -f 1 -d ' ' | sed -e s/,.*//g | uniq | command grep -v "\["`;)" ssh
fi # }}}
# Vim # {{{
_do_vim_completion
unset _do_vim_completion
# }}}
# Oth # {{{
complete | command grep -q " cdd$" || complete -o bashdefault -o default -o nospace -W "$($ALIASES cd_wrapper -- @@ - -i | tr '\n' ' ')" cdd
# }}}
# tldr # {{{
complete -W "$(q=($HOME/.local/share/tldr/*/*); sed 's@\.md @ @g' <<<${q[@]##*/})" tldr
# }}}
# Source additional completions {{{
if [[ -e $BASH_PATH/completion.d ]]; then
  for i in $(ls $BASH_PATH/completion.d); do
    [[ -f $BASH_PATH/completion.d/$i ]] && source $BASH_PATH/completion.d/$i
  done
fi
if [[ -e $RUNTIME_PATH/completion.d ]]; then
  for i in $(ls $RUNTIME_PATH/completion.d); do
    [[ -f $RUNTIME_PATH/completion.d/$i && ( -x $RUNTIME_PATH/completion.d/$i || $i == *.sh || $i == *.bash ) ]] && source $RUNTIME_PATH/completion.d/$i
  done
fi
# }}}
# Source profile specic completions {{{
for i in $BASH_PROFILES_FULL; do
  [[ -e $i/completion ]] && source $i/completion
done
# }}}

