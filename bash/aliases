#!/usr/bin/env bash
# vim: fdl=0

# Configure {{{
export BASH_ALIASES_FROM_CMD=false
if [[ "${BASH_SOURCE[0]}" == "$0" && ! -z $1 ]]; then
  export BASH_ALIASES_FROM_CMD=true
  if [[ $1 == '-c' || $1 == '--clean' ]]; then # {{{
    shift
    set +f; shopt -s extglob
    rm -f $TMP_MEM_PATH/.bashrc/aliases*
  fi # }}}
else
  if [[ $1 == '--clean' ]]; then
    shift
    set +f; shopt -s extglob
    rm -f $TMP_MEM_PATH/.bashrc/aliases*
    RCSTUFF_ALIASES_INSTALLED=false
  fi
  if ${RCSTUFF_ALIASES_INSTALLED:-false}; then
    case $1 in
    --force | --clean) shift;;
    *) declare -f ___rcstuff_aliases_markup >/dev/null 2>&1 && unset BASH_ALIASES_FROM_CMD && return 0
    esac
  fi
  export RCSTUFF_ALIASES_INSTALLED=true
  ___rcstuff_aliases_markup() { : ; }
  export -f ___rcstuff_aliases_markup
fi
install() { # {{{
  $BASH_ALIASES_FROM_CMD && return 0
  local tool="$1"
  local add_completion=
  if [[ "$tool" == *:@@* ]]; then
    add_completion="${tool##*:@@}"
    tool="${tool%:@@*}"
    [[ -z $add_completion ]] && add_completion="$tool"
  fi
  [[ $TO_INSTALL != *\ $tool\ * ]] && return 1
  [[ ! -z $add_completion ]] && export COMPLETION_GENERIC_FUNCTIONS+=" ${add_completion//:/ }"
  return 0
}
export -f install
# }}}
installExtensions() { # {{{
  local dumpFile="$TMP_MEM_PATH/.bashrc/aliases-$2.dump" complFile="$TMP_MEM_PATH/.bashrc/aliases.compl" lockDir="$TMP_MEM_PATH/.bashrc/.lock-$2.lock"
  [[ ! -d $TMP_MEM_PATH/.bashrc ]] && command mkdir $TMP_MEM_PATH/.bashrc
  $BASH_ALIASES_FROM_CMD && [[ ! -e "$dumpFile" ]] && dumpFile="${dumpFile%.dump}-local.dump"
  if [[ ! -e "$dumpFile" || ! -e "$complFile" ]]; then # {{{
    local i= fi= compl= list= wdir=$1
    if ! $BASH_ALIASES_FROM_CMD; then
      ( ii=0; while ! command mkdir "$lockDir" 2>/dev/null && [[ $ii -lt 6 ]]; do
          sleep 0.5; ii=$(($ii+1))
        done
      )
    fi
    local complOrig="$COMPLETION_GENERIC_FUNCTIONS"
    COMPLETION_GENERIC_FUNCTIONS=""
    for i in $(command cd $wdir; find . -maxdepth 1 -type f -print | sed 's|^\./||' | sort -n); do # {{{
      fi="$wdir/$i"
      [[ $i =~ ^[0-9]+\..* ]] && i="${i#*.}"
      compl= && list=
      [[ -e $complFile ]] && compl="$(awk '/^'"${fi##*/}"': / {print $2}' "$complFile")"
      if [[ -z $compl ]]; then # {{{
        list+=" $(sed -n 's/\(^[a-zA-Z].*\)()\s*{.*# @@\($\|[^:].*\)/\1/p' "$fi" | tr '\n' ' ')"
        list+=" $(sed -n 's/^function \([a-zA-Z].*\)\(()\)\?\s*{.*# @@\($\|[^:].*\)/\1/p' "$fi" | tr '\n' ' ')"
        list+=" $(sed -n '/# @@:/s/.*# @@:\s*\([^ ]*\).*/\1/p' "$fi" | tr '\n' ' ')"
        list+=" $(awk -F'[ =]' '/^alias .*# @@$/ {print $2}' "$fi")"
        list="$(echo $list)"
        if command grep -q "^# complete" "$fi"; then
          list+=" $(sed -n '/^# complete:/s/^[^:]*://p' "$fi")"
          list="$(echo $list)"
          [[ -z $list ]] && compl=":@@"
        fi
        if [[ ! -z $list ]]; then
          list="$(echo $list | tr '[ :]' '\n' | sort -u | sed '/^\s*^/d' | tr '\n' ':' | sed 's/:$//')"
          compl=":@@:$list"
        fi
        echo "${fi##*/}: ${compl:--}" >>"$complFile" # }}}
      elif [[ $compl == '-' ]]; then # {{{
        compl=""
      fi # }}}
      command grep -q "^# env:" "$fi" && eval "$(sed -n '/# env: /s/# env: \(.*\)/\1/p' "$fi")"
      if install "$i$compl"; then # {{{
        if [[ ! -e "$dumpFile" ]]; then
          cat >"$dumpFile" <<-EOF
						#!/usr/bin/env bash
						# vim: fdl=0
						
					EOF
        fi
        {
          echo "#-#-# START: $fi # {{{"
          cat "$fi"
          sed -n '/^# env: /s/# env: \(.*\)/\1/p' "$fi"
          echo "#-#-# END: $fi # }}}"
        } >>"$dumpFile"
      fi # }}}
    done # }}}
    local complNew="$COMPLETION_GENERIC_FUNCTIONS"
    export COMPLETION_GENERIC_FUNCTIONS="$complOrig"
    echo "#-#-# ---- END ----" >>"$dumpFile"
    echo "export COMPLETION_GENERIC_FUNCTIONS+=\" $complNew\"" >>"$dumpFile"
    rm -rf "$lockDir"
  fi # }}}
  if [[ -e "$dumpFile" ]]; then # {{{
    source "$dumpFile"
  fi # }}}
}
export -f installExtensions
# }}}
_aliases_dbg() { # {{{
  local isSilent=${ALIASES_SILENT:-false}
  [[ $1 == '--force' ]] && shift && isSilent=false
  $isSilent && return
  echo $@ >/dev/stderr
}
export -f _aliases_dbg
# }}}
# Check ALIASES_MAP {{{
TO_INSTALL=''
ALIASES_MAP_BASIC="cmatrix vim-aliases ls-colors rsync less cp-recur cd-stuff date du df zipf find-short diff rmf-basic grep hl mkdir \
  ack-wrapper mg extract tmux-tools logout exit sshh ps1-tools bash-phistory set-title progress weather bash-hist mutex-locking \
  run_for_some_time for-do clear-screen smart-alias get-file-list remember cpp lolcat kb-open kill-rec oth-aliases unicode-chars src aawk time2s"
$FZF_INSTALLED && ALIASES_MAP_BASIC+=' fzf-tools'
ALIASES_MAP_EXT="gitst truecrypt shlock clang grc xclip rmf-trash print-colors encryptor www sshh-add \
  simple-http auto-sudo radare2 reminder sudo dum"
! $IS_MAC && ALIASES_MAP_EXT+=" caps-ctrl"
[[ $ALIASES_MAP == 'NONE' ]] && exit 0
TO_INSTALL=" $ALIASES_MAP_BASIC $ALIASES_MAP_EXT "
if [[ ! -z $ALIASES_MAP ]]; then
  a_map=" $ALIASES_MAP "
  if [[ $a_map == *\ BASIC\ * ]]; then
    a_map="${a_map//' BASIC '/ }"
    TO_INSTALL=" $ALIASES_MAP_BASIC "
  fi
  for i in $a_map; do
    case $i in
    -*) TO_INSTALL="${TO_INSTALL// ${i#-} / }";;
    *)  TO_INSTALL+=" $i ";;
    esac
  done
  unset a_map
fi
TO_INSTALL=" $TO_INSTALL "
# _aliases_dbg "To alias: [$TO_INSTALL]" >/dev/stderr
# }}}
# }}}
# Aliases {{{
if install 'vim-aliases'; then # {{{
  alias vv='vim --fast'
  export PHISTORY_IGNORED_COMMANDS+=":vv"
fi # }}}
if install 'cmatrix' && which cmatrix >/dev/null 2>&1; then
  export CMATRIX_COLORS=( 'red' 'green' 'yellow' 'blue' 'magenta' 'cyan' )
  alias cmatrix="cmatrix -u ${CMATRIX_SPEED:-5} -b -C "'${CMATRIX_COLORS[$(($RANDOM % ${#CMATRIX_COLORS[*]}))]}'
fi
if install 'ls-colors'; then # {{{
  # Enable color support of ls and also add handy aliases {{{
  if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    export LS_COLORS='di=36;40:ln=35;40:so=37;40:pi=33;40:ex=32;40:bd=0;43:cd=0;43:su=0;45:sg=0;45:tw=4;36:ow=4;36:'
    alias ls='ls --color=auto -B'
    alias ll='ls --color=auto -ABlhv'
    alias l.='ls --color=auto -ABlvhd .*'
  else
    alias ll='ls -ABlhv'
    alias l.='ls -ABlhvd .*'
  fi
  # }}}
fi # }}}
if install 'rsync'; then # {{{
  alias rsync='rsync $RSYNC_DEFAULT_PARAMS'
  alias rsync-v='rsync $RSYNC_DEFAULT_PARAMS_VERBOSE'
  alias rsync-fat='rsync $RSYNC_DEFAULT_PARAMS $RSYNC_DEFAULT_PARAMS_FAT'
  alias rsync-fat-v='rsync $RSYNC_DEFAULT_PARAMS_VERBOSE $RSYNC_DEFAULT_PARAMS_FAT'
fi # }}}
if install 'less'; then # {{{
  alias more='less'
fi # }}}
if install 'cp-recur'; then # {{{
  alias cp='cp -R'
fi # }}}
if install 'du'; then # {{{
  alias du='du -sh'
fi # }}}
if install 'df'; then # {{{
  if $IS_MAC; then
    alias df='df -h'
  else
    alias df='df -Th'
  fi
fi # }}}
if install 'gitst'; then # {{{
  alias gitst='git-cmds.sh gitst'
fi # }}}
if install 'truecrypt'; then # {{{
  alias truecrypt='truecrypt -t'
fi # }}}
if install 'shlock'; then # {{{
  alias shlock='sshh-add --lock'
fi # }}}
if install 'diff'; then # {{{
  if type colordiff >/dev/null 2>&1; then
    alias diff='\colordiff -u'
    alias diff-sbs='\colordiff -y --suppress-common-lines'
  else
    alias diff='\diff -u --suppress-common-lines'
    alias diff-sbs='\diff -y --suppress-common-lines'
  fi
fi # }}}
if install 'clang'; then # {{{
  alias clang='clang $CLANG_PARAMS $CLANG_PARAMS_COMMON $CLANG_PARAMS_W'
  alias clang++='clang++ $CLANGPP_PARAMS $CLANG_PARAMS_COMMON $CLANG_PARAMS_W'
fi # }}}
if install 'fix-mouse'; then # {{{
  alias fix_mouse='unclutter -idle 1 -root -grab -visible'
fi # }}}
if install 'grc'; then # {{{
  if type grc >/dev/null 2>&1; then
    grc_prgs=''
    grc_prgs+="mount\n"
    if type column >/dev/null 2>&1; then
      for i in $(echo -e "$grc_prgs"); do
        alias ${i/:*}="__util_grc_f() { [[ -z \$1 && -t 1 ]] && { command ${i//:/ } | column -t | grcat conf.${i/:*}; } || command ${i//:/ } "\$@"; }; __util_grc_f"
      done
      grc_prgs=''
    fi
    grc_prgs+="traceroute ::google.pl\nconfigure\ngcc\nnetstat\nwdiff\nlast\nps\ndig\n"
    grc_prgs+="mtr ::google.pl @@case \\\$1 in 8) arg='8.8.8.8';; esac;\n"
    grc_prgs+="ping ::-c:5:8.8.8.8 @@case \\\$1 in 8) arg='8.8.8.8';; esac;\n"
    if ! $IS_MAC; then
      grc_prgs+="ifconfig\n"
    else
      grc_prgs="${grc_prgs/mtr/sudo-mtr}"
    fi
    while read cmd i; do
      [[ -z $cmd ]] && continue
      sudo= def= code=":" params=
      [[ $cmd == sudo-* ]] && cmd="${cmd#sudo-}" && sudo="sudo"
      while [[ ! -z $i ]]; do
        ii="${i%% *}"
        case $ii in
        ::*) def="${ii#::}"; def="${def//:/ }";;
        @@*) code="${i#@@}"; break;;
        *)   params+="$ii ";;
        esac
        i="${i#$ii}" && i="${i# }"
      done
      alias $cmd="__util_grc_f() { arg=\"\$@\"; ${code%;}; if [[ -t 1 ]]; then $sudo grc $cmd \${arg:-$def}; else $sudo command $cmd \${arg:-$def}; fi; }; __util_grc_f"
    done <<<"$(echo -e "$grc_prgs")"
    unset grc_prgs cmd i ii sudo def code params
  fi
fi # }}}
if install 'xclip'; then # {{{
  if which xclip >/dev/null 2>&1; then
    xclip() { # {{{
      if [[ ! -t 0 && -z $1 ]]; then
        command xclip -selection clipboard
      else
        command xclip $@
      fi
    } # }}}
    alias ccopy='command xclip -selection clipboard'
    alias cpaste='command xclip -selection clipboard -o'
  fi
fi # }}}
if install 'bash-hist'; then # {{{
  if $FZF_INSTALLED; then
    alias hist="history | fzf --no-sort --tac"
  else
    alias hist="history | hl +cG \"^\s\+[0-9]\+\" +cB -e \"[0-9]\+-[0-9]\+\" | grep_wrapper --cmd-grep +tee=false +cY -e "
  fi
  alias H="hist"
  alias h="phist"
  export HISTIGNORE+=":h:h *:H:H *:hist:hist *:history*"
fi # }}}
if install 'mkdir'; then # {{{
  alias mkdir='mkdir -pv'
fi # }}}
if install 'lolcat'; then # {{{
  alias lolcat='\lolcat -F 0.2 -p 3'
  alias lolcatA='\lolcat -F 0.2 -a -d 7 -s 18'
fi # }}}
if install 'radare2' && which r2 >/dev/null 2>&1; then # {{{
  alias r2help="r2 -q -c '?*~...' -"
fi # }}}
if install 'auto-sudo'; then # {{{
  if [[ $(id -u) != 0 ]] ; then
    ALIASES_AUTO_SUDO_PROMPT="progress --msg \"Auto-SUDO\" --dots --cnt 40 --no-err"
    if $IS_MAC; then
      alias port="$ALIASES_AUTO_SUDO_PROMPT && sudo port"
    else
      alias apt="$ALIASES_AUTO_SUDO_PROMPT && sudo apt -y"
      alias apt-get="$ALIASES_AUTO_SUDO_PROMPT && sudo apt-get -y"
      alias dpkg="$ALIASES_AUTO_SUDO_PROMPT && sudo dpkg"
      alias service="$ALIASES_AUTO_SUDO_PROMPT && sudo service"
      alias systemctl="$ALIASES_AUTO_SUDO_PROMPT && sudo systemctl"
    fi
  fi
fi # }}}
if install 'oth-aliases'; then # {{{
  which rlwrap >/dev/null 2>&1 && alias rlwrap='rlwrap '"$RLWRAP_OPTS"
  which mc     >/dev/null 2>&1 && alias mc='mc -u'
  alias suspend='sudo systemctl suspend'
fi # }}}
# }}}
# Functions {{{
if install 'sudo'; then # {{{
  sudo() { # {{{
    if [[ ! -z $1 ]]; then
      command sudo $@
    else
      command sudo --preserve-env=HOME -s
    fi
  } # }}}
fi # }}}
if install 'unicode-chars'; then # {{{
  getUnicodeChar() { # {{{
    [[ ! -e "$UNICODE_EXTRA_CHARS_FILE" ]] && return 1
    source "$UNICODE_EXTRA_CHARS_FILE"
    if [[ $1 == '--check' ]]; then
      local i= v= len= width=
      for i in $(echo ${!UNICODE_EXTRA_CHARS[*]} | tr ' ' '\n' | sort); do
        v="${UNICODE_EXTRA_CHARS[$i]}"
        len="${#v}"
        width="$(echo -en "$v" | wc -L)"
        if [[ $len != $width ]]; then
          echo "UNICODE_EXTRA_CHARS[$i]=\"$i\" # $v"
        fi
      done
      return 0
    fi
    echo "${UNICODE_EXTRA_CHARS[$1]}"
  } # }}}
fi # }}}
if install 'kill-rec:@@:kr'; then # {{{
  kill-rec() { # {{{
    if [[ "$1" == '@@' ]]; then # {{{
      command ps --no-headers -o pid,comm
      echo "true false"
      echo "-SIGTERM -SIGKILL -SIGABRT -9"
      return 0
    fi # }}}
    local pid= pids= and_self=true signal='-SIGTERM'
    while [[ ! -z $1 ]]; do
      case $1 in
      true | false) and_self="$1";;
      -*)           signal="$1";;
      *)            break;;
      esac
      shift
    done
    [[ -z $1 ]] && and_self=false
    for pid in ${@:-$PPID}; do
      if ! command ps --no-headers -o pid | command grep -q "^\s*$pid$"; then # {{{
        pid="$(command ps --no-headers -o pid,comm | command grep " $pid$" | awk '{print $1}')"
        [[ -z $pid ]] && return 1
      fi # }}}
      pids="$(pgrep -P "$pid")"
      [[ ! -z $pids ]] && kill-rec true $signal $pids
      $and_self && kill $signal "$pid" >/dev/null 2>&1
    done
    return 0
  } # }}}
  alias kr='kill-rec'
  export PHISTORY_IGNORED_COMMANDS+=":kill-rec:kr"
fi # }}}
if install 'smart-alias'; then # {{{
  smart_alias() { # {{{
    local cmd= store=
    while [[ ! -z $1 ]]; do # {{{
      case $1 in
      --title) set_title --set-pane "$2"; shift;;
      --cmd)   cmd="$2"; shift;;
      --store) store="$2"; shift;;
      --)      shift; break;;
      *)       break;;
      esac
      shift
    done # }}}
    [[ -z $cmd ]] && echo "Command is missing" >/dev/stderr && return 1
    if [[ ! -z $store ]]; then # {{{
      if [[ -z $1 ]]; then
        [[ ! -z $store ]] && set -- ${!store}
      else
        export $store="$@"
      fi
    fi # }}}
    eval "$cmd"
  } # }}}
  alias mcd="smart_alias --cmd 'command mkdir -pv \"\$1\" && cd_wrapper -- \"\$1\"'"  # Syntax fix for Vim in OS/X'"
  alias mcdd="smart_aliast --cmd 'command mkdir -pv \"\$1\" && pushd \"\$1\"'"  # Syntax fix for Vim in OS/X'"
  alias ll*="smart_alias --store 'SMART_AL_LL_ASTER' --cmd 'ls -Alhv | command grep --color=yes \"\$1\"'"  # Syntax fix for Vim in OS/X'"
  alias chmod="smart_alias --cmd '[[ ! -f \"\$1\" ]] && command chmod \"\$@\" || command chmod +x \"\$@\"'"  # Syntax fix for Vim in OS/X'"
fi # }}}
if install 'get-file-list:@@:getFileList'; then # {{{
  getFileList() {
    local cmd="ls -d" pwd="." narrow= verbosity=0
    if [[ $1 == '@@' ]]; then # {{{
      case $3 in
      --pwd) echo "@@-d";;
      -n)    echo "1 2 3 5 10";;
      *)     echo "-v -vv --cmd --pwd -1 -n -t";;
      esac
      exit 0
    fi # }}}
    while [[ ! -z $1 ]]; do # {{{
      case $1 in
      --)    shift; break;;
      --cmd) cmd="$2"; shift;;
      --pwd) pwd="$2"; shift;;
      -1)    narrow=1;;
      -n)    narrow="$2"; shift;;
      -v)    verbosity=1;;
      -vv)   verbosity=2;;
      -*)    cmd+=" $1";;
      *)     break;;
      esac
      shift
    done # }}}
    local no_files=false
    [[ $pwd != '.' ]] && command cd "$pwd"
    [[ "$(eval echo "${1:-*}")" == "${1:-*}" ]] && no_files=true
    if $no_files; then
      [[ $pwd != '.' ]] && command cd - >/dev/null 2>&1
      return 1
    fi
    cmd="$cmd ${1:-*}"
    [[ ! -z $narrow ]] && cmd+=" | head -n $narrow"
    if [[ $verbosity -ge 1 ]]; then
      echo "$(eval $cmd)" >/dev/stderr
      if [[ $verbosity -ge 2 ]]; then
        eval "$cmd"
      else
        eval "$cmd" 2>/dev/null
      fi
    else
      eval "$cmd" 2>/dev/null
    fi
    [[ $pwd != '.' ]] && command cd - >/dev/null 2>&1
    return 0
  }
fi # }}}
if install 'clear-screen:@@:clr'; then # {{{
  clr() { # {{{
    local scr=true
    local reset=false
    local hist=true
    if [[ $1 == '@@' ]]; then
      local ret=""
      $scr   && ret+=" --no-scr"   || ret+=" --scr"
      $reset && ret+=" --no-reset" || ret+=" --reset"
      if [[ -n $TMUX ]]; then
        $hist && ret+=" --no-hist" || ret+=" --hist"
      fi
      echo "$ret"
      return 0
    fi
    while [[ ! -z $1 ]]; do
      case $1 in
        --reset)    reset=true;;
        --no-reset) reset=false;;
        --scr)      scr=true;;
        --no-scr)   scr=false;;
        --hist)     hist=true;;
        --no-hist)  hist=false;;
      esac
      shift
    done
    if $scr; then
      $reset && reset || clear
    fi
    $hist && [[ -n $TMUX ]] && tmux clear-history
    return 0
  } # }}}
fi # }}}
if install 'run_for_some_time:@@'; then # {{{
  run_for_some_time() { # {{{
    watchdog() { # {{{
      local process_pid=
      initial_sleep=$(( $initial_sleep * 10 ))
      for (( ; $initial_sleep > 0; initial_sleep-- )); do
        sleep 0.1
        command ps | command grep -q "$watchdog_cmd" 2>/dev/null && break
      done
      local first=true
      for (( ; $cnt > 0; cnt-- )); do
        process_pid=$(command ps | command grep "$watchdog_cmd" | sed -e 's/^ *//' | cut -d\  -f1)
        if [[ $? != 0 || -z $process_pid ]]; then
          ! $first && return 1
          sleep 1
        fi
        first=false
        sleep $sleep_for
      done
      local err=0
      if ps | command grep -q "$process_pid" 2>/dev/null; then
        kill $process_pid >/dev/null 2>&1
      else
        err=2
      fi
      return $err
    } # }}}
    if [[ $1 == @@ ]]; then
      case $3 in
      --wait) echo 15{,:10} 30s{,:2,:10} 2m30s{,:2,:10};;
      *)      echo "--cmd --watchdog-cmd --initial-sleep --dbg --wait";;
      esac
      return 0
    fi
    local cmd= watchdog_cmd= cnt=30 sleep_for=1 initial_sleep=2
    local dbg=false
    while [[ ! -z $1 ]]; do
      case $1 in
      --cmd)           shift; cmd="$1";;
      --watchdog-cmd)  shift; watchdog_cmd="$1";;
      --initial-sleep) shift; initial_sleep=$1;;
      --wait) # {{{
        shift
        local s=0
        s=$($ALIASES time2s ${1%:*} -o s)
        cnt="${1#*:}"
        [[ -z $cnd || $cnt == 0 ]] && cnt="1"
        sleep_for="$(echo "1 $cnt" | awk '{print $1/$2}')"
        cnt="$((${s:-0}*$cnt))"
        [[ -z $cnt ]] && cnt=30
        ;; # }}}
      --dbg)           dbg=true;;
      esac
      shift
    done
    [[ -z $cmd ]] && echo "Command to execute is missing" >/dev/stderr && return 1
    [[ -z $watchdog_cmd ]] && watchdog_cmd=$(echo "$cmd" | sed -e 's/^\(command\|eval\) \+//' -e 's/ .*//')
    watchdog &
    local watchdog_pid=$!
    local cmd_return=0
    ! $dbg && { exec 3>&2; exec 2> /dev/null; true; } || set -xv
    eval $cmd
    cmd_return=$?
    ! $dbg && { exec 2>&3; exec 3>&-; true; } || set +xv
    wait $watchdog_pid
    local interrupted_by_watchdog=$(test $? == 0 && echo true || echo false)
    ps | command grep -q $watchdog_pid && kill $watchdog_pid
    unset watchdog
    $interrupted_by_watchdog && return 255
    [[ $cmd_return != 0 ]] && return 1
    return 0
  } # }}}
fi # }}}
if install 'weather:@@'; then # {{{
  weather() { # {{{
    if [[ $1 == '@@' ]]; then
      echo "--loop -1 -2"
      return 0
    fi
    local LOOP_TIME=$(( 4 * 60 * 60 ))
    local loop=false org_city='Wroclaw' c= day= params= ver=
    while [[ ! -z $1 ]]; do # {{{
      case $1 in
        --loop) loop=true; echo "$2" | command grep -q '^[0-9]\+' && LOOP_TIME=$(($2 * 60 * 60)) && shift;;
        -1)     ;;
        -2)     ver="format=v2";;
        -d)     day=$2;            shift;;
        +)      params+="&$2";     shift;;
        +*)     params+="&${1#+}"       ;;
        *)      org_city="$@";     break;;
      esac
      shift
    done # }}}
    local city="$org_city"
    [[ ! -z $params ]] && params="?${params:1}"
    while true; do # {{{
      clear
      for c in ${city:-$org_city}; do # {{{
        c="$(echo ${c:0:1} | tr '[a-z]' '[A-Z]')${c:1}"
        [[ $c == '-' ]] && c=
        set_title --set-pane "${c:-$org_city}"
        if [[ ! -z $day ]]; then # {{{
          case $day in
          Mon|Tue|Wed|Thu|Fri|Sat|Sun);;
          *) day="${day,,}"
             day="$(echo ${day:0:1} | tr '[a-z]' '[A-Z]')${day:1}";;&
          esac
          case $day in
            Mon|Tue|Wed|Thu|Fri|Sat|Sun);;
            *) day=;;
          esac
        fi # }}}
        local p=
        [[ ! -z $params ]] && p+="$params"
        [[ ! -z $ver ]] && p+="&$ver"
        [[ ! -z $p ]] && p="?${p:1}"
        if [[ ! -n $TMUX || "$(tmux display-message -t $TMUX_PANE -p -F '#{pane_width}')" -ge 125  ]]; then
          if [[ -z $day ]]; then
            curl -s -4 http://wttr.in/$c$p
          else
            curl -s -4 http://wttr.in/$c$p | sed -n -e "1p" -e "/\<$day\>/,+9 {x;p;d;}; x"
          fi | { [[ ! -z "$WEATHER_2CHAR_ICONS" ]] && sed 's/\('"$WEATHER_2CHAR_ICONS"'\)/\0 /g' || cat -; }
        else
          echo "Pane is too small"
        fi
      done # }}}
      ! $loop && break
      local key= # {{{
      read -t $LOOP_TIME key
      [[ $? != 0 ]] && continue
      set -- $key
      [[ -z $1 ]] && ver=
      while [[ ! -z $1 ]]; do # {{{
        case $1 in
        q)  break 2;;
        1)  ver=;;
        2)  ver='format=v2';;
        c)  city="$org_city";;
        -)  city="-";;
        d | d*)
            if [[ $1 == 'd' ]]; then
              day="$2"
              shift
            else
              c="${1:1}"
              case ${c,,} in
              mon | tue | wed | thu | fri | sat | sun) day="$c";;
              *) city="$@"; break;;
              esac
            fi;;
        *)  city="$@"; break;;
        esac
        shift
      done # }}} # }}}
    done # }}}
  } # }}}
  alias pogoda='weather'
fi # }}}
if install 'kb-open:@@:kb-open:kb'; then # {{{
  kb-open() {
    local i= p=
    if [[ $1 == '@@' ]]; then # {{{
      local ret=
      for i in $KB_PATHS; do
        ret+=" ${i%%:*}"
      done
      echo "$ret"
      return 0
    fi # }}}
    [[ -z $1 ]] && echo "Missing KB name" >/dev/stderr && return 1
    for i in $KB_PATHS; do # {{{
      [[ $1 == ${i%%:*} ]] && p="${i#*:}"
    done # }}}
    [[ -z $p ]]  && echo "Could not find path of KB [$i]" >/dev/stderr && return 1
    [[ ! -e $p/.env ]] && echo "The .env file for KB [$i] could not be found" >/dev/stderr && return 1
    (
      command cd "$p"
      source .env
      r="$(alias \
        | grep "^alias init-session=" \
        | awk -F'=' '{$1=""; print $0}' \
        | sed -e "s/^\s*'//" -e "s/'\s*$//" -e "s/'\\\''/'/g"\
      )"
      eval $r
    )
  }
  alias kb='kb-open'
fi # }}}
if install 'simple-http:@@:simple_http'; then # {{{
  simple_http() { # {{{
    if [[ $1 == '@@' ]]; then
      echo '-t --timeout -p --port -f --file'
      return 0
    fi
    ! type nc >/dev/null 2>&1 && echo "\"nc\" not installed" >/dev/stderr && return 1
    local file=
    local port=8080
    local timeout=$((5*60))
    while [[ ! -z $1 ]]; do
      case $1 in
        -p|--port)    shift; port=$1;;
        -t|--timeout) shift; timeout=$1;;
        -f|--file)    shift; file=$1;;
        *)            file=$1;;
      esac
      shift
    done
    [[ -z $file ]] && echo "File name is missing" >/dev/stderr && return 1
    echo -e "Serving file [$file] on port [$port], waiting for [$timeout] second for any connection...\n" >/dev/stderr
    { echo -ne "HTTP/1.0 200 OK\r\n\r\n"; cat "$file"; } | nc -kl -q $timeout -p $port
  } # }}}
fi # }}}
if install 'for-do'; then # {{{
  for_do() { # {{{
    local arg= cmd=
    if [[ "$@" == *\ --\ * ]]; then
      arg="$@"
      cmd="$@"
      args="$(echo "${arg/ -- *}" | sed -e 's/^\s\+//' -e 's/\s\+$//')"
      cmd="$( echo "${cmd/* -- }" | sed -e 's/^\s\+//' -e 's/\s\+$//')"
    else
      arg="$1"
      shift
      cmd="$@"
    fi
    arg="${arg// /\\n}"
    echo -e "$arg\n" | xargs -n1 $cmd
  } # }}}
  alias for-do='for_do'
fi #}}}
if install 'caps-ctrl'; then # {{{
  fix_caps() { # {{{
    which setxkbmap >/dev/null 2>&1 && setxkbmap -option 'caps:ctrl_modifier'
    if which xcape >/dev/null 2>&1; then
      killall xcape >/dev/null 2>&1
      xcape -e "${CAPS_KEY:-Caps_Lock}=Escape"
    fi
  } # }}}
fi #}}}
if install 'date:@@'; then # {{{
  date() { # {{{
    if [[ $1 == '@@' ]]; then
      case $3 in
      +) echo "%Y-%m-%d %Y.%m.%d %H%M%S";;
      *) echo "+ -d +t +d +dt";;
      esac
      return 0
    fi
    [[ -z $1 ]] && eval command date +$DATE_FMT && return
    local p=
    while [[ ! -z $1 ]]; do
      case $1 in
      +t)       p="+$TIME_FMT";;
      +d)       p="+$DATE2_FMT";;
      +dt)      p="+$DATE_FMT";;
      +)        shift; p="+$1";;
      *)        break;;
      esac
      shift
    done
    command date $p "$@"
  } # }}}
fi # }}}
if install 'rmf-basic'; then # {{{
  alias rmf='rm -rf'
fi # }}}
if install 'print-colors:@@:printColors'; then # {{{
  printColors() { # {{{
    if [[ $1 == '@@' ]]; then # {{{
      local ret="--txt --fg --bg --all --show --pairs"
      case $3 in
      --show) ret="full ids";;
      esac
      echo "$ret"
      return 0
    fi # }}}
    local text= fgs= bgs= show_colors= pairs= tmp_text= b= f= cb= cf= p=
    while [[ ! -z $1 ]]; do # {{{
      case $1 in
      --txt)   text="$2"; shift;;
      --fg)    fgs="$2"; shift;;
      --bg)    bgs="$2"; shift;;
      --all)   fgs=$(echo {0..255}); bgs=$(echo {0..255});;
      --show)  show_colors="$2"; shift;;
      --pairs) pairs="$2"; shift;;
      esac
      shift
    done # }}}
    if [[ -z $pairs ]]; then # {{{
      [[ -z $fgs ]] && fgs=$(echo {0..255})
      [[ -z $bgs ]] && bgs="0"
      for b in $bgs; do
        for f in $fgs; do
          pairs+="$b;$f "
        done
      done
    fi # }}}
    tmp_text="$text"
    for p in $pairs; do # {{{
      b=$(printf "%03d" ${p%;*})
      f=$(printf "%03d" ${p#*;})
      cb="[48;5;${b}m"
      cf="[38;5;${f}m"
      [[ -z $text ]] && tmp_text="Colour:$f($b)"
      case $show_colors in # {{{
      full) printf "| ^[%s ^[%s | " "$cb" "$cf";;
      ids)  printf "| %3d %3d | "   "${p%;*}"  "${p#*;}";;
      esac # }}}
      printf "\x1b%s\x1b%s%s[0m\n" "$cb" "$cf" "$tmp_text"
    done # }}}
  } # }}}
fi # }}}
if install 'zipf'; then # {{{
  zipf() { # {{{
    [ -d "$1" ] && zip -r $1.zip $@ && return 0
    [ "$1" == '-' ] && shift && zip -r $1.zip $@ && return 0
    while [ -f "$1" ]; do gzip $1; shift; done
  } # }}}
fi # }}}
if install 'logout'; then # {{{
  logout() { # {{{
    if [[ ! -n $TMUX ]]; then
      command logout 2>/dev/null || command exit
    else
      echo $TMUX_SESSION > $TMP_PATH/.tmux_last_session
      tmux detach -P
    fi
  } # }}}
fi # }}}
if install 'exit'; then # {{{
  Exit() { # {{{
    if [[ ! -n $TMUX ]]; then
      command exit $@
    else
      local title="$TMUX_SESSION"
      tmux detach -P
      tmux kill-session -t $title
    fi
  } # }}}
fi # }}}
if install 'www'; then # {{{
  www() { # {{{
    local params="-s" query= site="${WWW_DEFAULT_SITE:-"www.google.pl"}" title="www"
    while [[ ! -z "$1" ]]; do
      case "$1" in
      --)         shift; params+="$@"; break;;
      www* | *.*) params+=" -N $1"; title+=" $1";;
      -*)         params+=" $1";;
      *)
        [[ ! -z $query ]] && query+="%20"
        query+="${1// /%20}"
        [[ $title == "www" ]] && title+=" ?"
        title+=" $1";;
      esac
      shift
    done
    [[ ! -z $query ]] && params+=" -N $site/search?q=$query"
    if [[ -z $params ]]; then
      params="-N $site"
      title+=" $site"
    fi
    set_title --set-pane "$title"
    ( set -x; w3m $params )
  } # }}}
  export HISTIGNORE+=":www:www *"
fi # }}}
if install 'ovpn'; then # {{{
  ovpn() { # {{{
    local p="/mnt/truecrypt/qv"
    local mount_cmd="mnt.sh -D qv"
    local mounted=false
    local config=$p/ovpn/ovpn/$1.ovpn
    local err=0
    if [[ ! -d $p || ! "$(ls -A $p)" ]]; then
      $mount_cmd
      mounted=true
    fi
    if [[ -e $config ]]; then
      sudo openvpn --config $config
    else
      _aliases_dbg "Configuration file ($config) does not exist"
      err=1
    fi
    $mounted && $mount_cmd
    return $err
  } # }}}
fi # }}}
if install 'dum:@@'; then # {{{
  dum() { # {{{
    if [[ $1 == @@ ]]; then # {{{
      local ret=
      if $IS_MAC; then # {{{
        local i=
        for i in $(command mount | awk '/\/Volumes\// { print $3 }'); do
          [[ $i == *MobileBackups ]] && continue
          ret+=" $i"
        done
        for i in $(command mount | awk '/\/Volumes\// { print $1 }'); do
          [[ $i == localhost* ]] && continue
          ret+=" $i"
        done # }}}
      else # {{{
        ret="$(command mount | awk '/\/media\/'$USER'\// { print $3 }')"
      fi # }}}
      echo "${ret:----}"
      return 0
    fi # }}}
    local src="$1" err=
    [[ -z $src ]] && ! $IS_MAC && src="$($ALIASES getFileList -t -1 "/media/$USER/*")"
    [[ -z $src ]] && echo "Mountpoint not specified" && return 1
    [[ ! -e $src ]] && echo "Mountpoint does not exist [$src]" && return 1
    $ALIASES progress --mark --msg "Unmounting $src" --dots --delay 0.1
    if $IS_MAC; then # {{{
      if [[ $src == /dev/* ]]; then
        diskutil unmountDisk $src >/dev/null && diskutil eject $src >/dev/null
      elif [[ $src == /Volumes/* ]]; then
        diskutil unmount "$src" >/dev/null
      fi # }}}
    else # {{{
      if [[ $src == /dev/* ]]; then
        umount $src
      elif [[ $src == /media/* ]]; then
        umount $src
      else
        ( set -xv
          sudo umount $src
        )
      fi
    fi # }}}
    err=$?
    $ALIASES progress --unmark $([[ $err != 0 ]] && echo "--err")
    return $err
  } # }}}
fi # }}}
if install 'src:@@'; then # {{{
  src() {
    local i= ii= verb=false
    local list="$(find $SCRIPT_PATH/bash/aliases.d -maxdepth 1 -type f)"
    for i in $BASH_PROFILES_FULL; do
      [[ -e $i/aliases ]] && list+="\n$($i/aliases __util_src)"
    done
    if [[ $1 == '@@' ]]; then # {{{
      echo -e "$list" | sed 's|.*/||'
      echo "-1 -2 -5"
      return 0
    fi # }}}
    list="$(ls -t $(echo -e "$list"))"
    i=$1
    case $i in
    '') # {{{
      verb=true
      local fm="$TMP_MEM_PATH/.bashrc/aliases-main.dump"
      [[ ! -e "$fm" ]] && return 1
      local mod="$(stat -c %Y "$fm")"
      i=""
      for ii in $list; do
        [[ $(stat -c %Y "$ii") -gt $mod ]] && i+=" $ii"
      done
      [[ -z $i ]] && return 0
      ;; # }}}
    -[0-9]*) # {{{
      verb=true
      i=${i#-}
      i="$(echo -e "$list" | head -n${i:-1})"
      ;; # }}}
    *) # {{{
      i=
      for ii; do
        i+=" $(echo -e "$list" | command grep "/$ii\$")"
      done
      ;; # }}}
    esac
    set - $i
    for i; do
      $vertb && echo "source ${i//$HOME\//\~/}"
      source $i
      local df="$(command grep -l "^#-#-# START: $i # {{{" $TMP_MEM_PATH/.bashrc/aliases*.dump 2>/dev/null | head -n1)"
      [[ -z $df ]] && continue
      local i_sed="$(echo "$i" | sed 's:[]\[^$.*/&]:\\&:g')"
      sed -n '1,/^#-#-# ---- END ----/{ /#-#-# ---- END ----/d; p }' "$df" >"${df}.tmp"
      sed -i '/#-#-# START: '$i_sed' # {{{/,/#-#-# END: '$i_sed' # }}}/d' "${df}.tmp"
      {
        echo "#-#-# START: $i # {{{"
        cat "$i"
        sed -n '/^# env: /s/# env: \(.*\)/\1/p' "$i"
        echo "#-#-# END: $i # }}}"
      } >>"${df}.tmp" # }}}
      sed -n '/^#-#-# ---- END ----/,$p' "$df" >>"${df}.tmp"
      mv "${df}.tmp" "$df"
    done
  }
fi # }}}
installExtensions "$SCRIPT_PATH/bash/aliases.d" main
# }}}
# MAIN {{{
# Source profiles # {{{
for i in $BASH_PROFILES_FULL; do
  [[ -e $i/aliases ]] && source $i/aliases ''
done # }}}
# Check if not sourced and called with params {{{
if $BASH_ALIASES_FROM_CMD; then
  # _aliases_dbg "cmd=[$@]"
  # ALIASES_SILENT=true
  cmd=$1
  shift
  $cmd "$@"
  err=$?
  exit $err
fi # }}}
# }}}
# Cleaning # {{{
unset TO_INSTALL ALIASES_MAP_BASIC ALIASES_MAP_EXT i install BASH_ALIASES_FROM_CMD ALIASES_AUTO_SUDO_PROMPT
set +f; shopt -s extglob
# }}}
